dnl System-dependent values.
dnl
dnl Copyright 2023 Odin Kroeger
dnl
dnl This file is part of suCGI.
dnl
dnl suCGI is free software: you can redistribute it and/or modify it under
dnl the terms of the GNU General Public License as published by the Free
dnl Software Foundation, either version 3 of the License, or (at your option)
dnl any later version.
dnl
dnl suCGI is distributed in the hope that it will be useful, but WITHOUT
dnl ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
dnl FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
dnl for more details.
dnl
dnl You should have received a copy of the GNU General Public License along
dnl with suCGI. If not, see <https://www.gnu.org/licenses>.
dnl
include(`macros.m4')dnl
/*
 * System-dependent values.
 *
 * DO NOT EDIT THIS FILE. Your changes will get overwritten.
 * Edit compat.h.m4 instead and generate compat.h using ./configure.
 *
 * Copyright 2023 Odin Kroeger
 *
 * This file is part of suCGI.
 *
 * suCGI is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * suCGI is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with suCGI. If not, see <https://www.gnu.org/licenses>.
 */

#if !defined(COMPAT_H)
#define COMPAT_H

/* Include <features.h> and <sys/param.h> in a round-about way. */
#include <limits.h>

ifdef(`__HAVE_SYS_PARAM_H', `dnl
/* <sys/param.h> is available. */
#if !defined(HAVE_SYS_PARAM)
#define HAVE_SYS_PARAM __HAVE_SYS_PARAM_H
#endif

')dnl
ifdef(`__HAVE_FEATURES_H', `dnl
/* <features.h> is available. */
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H __HAVE_FEATURES_H
#endif

')dnl
/* BSD/386 and BSD/OS */
#if defined(__bsdi__)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif

/* DragonFly BSD. */
#elif defined(__DragonFly__)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif

/* FreeBSD */
#elif defined(__FreeBSD__)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif

/* NetBSD */
#elif defined(__NetBSD__)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif

/* OpenBSD */
#elif defined(__OpenBSD__)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif

/* macOS */
#elif defined(__MACH__)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif

/* GNU/Linux, GNU Hurd, or GNU/kFreeBSD */
#elif defined(__GLIBC__) || defined(__GNU_LIBRARY__)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 1
#endif

/* Linux with uClibc */
#elif defined(__UCLIBC__)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 1
#endif

/* Minix */
#elif defined(__minix)
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif
#endif /* OS detection. */

/* Include <sys/param.h> if available. */
#if HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif

/* Include <features.h> if available. */
#if HAVE_FEATURES_H
#include <features.h>
#endif

/* Type that getgrouplist takes and returns group IDs as. */
#if !defined(GRP_T)
ifnempty(`__GRP_T', `dnl
#define GRP_T __GRP_T
', `dnl
#if defined(__MACH__) && __MACH__
#define GRP_T int
#else
#define GRP_T gid_t
#endif
')dnl
#endif /* !defined(GRP_T) */

/* Type that setgroups takes the number of groups as. */
#if !defined(NGRPS_T)
ifnempty(`__NGRPS_T', `dnl
#define NGRPS_T __NGRPS_T
', `dnl
#if defined(__linux__) && __linux__
#define NGRPS_T size_t
#else
#define NGRPS_T int
#endif
')dnl
#endif /* !defined(NGRPS_T) */


#endif /* !defined(COMPAT_H) */
