dnl System-dependent values.
dnl
dnl Copyright 2023 Odin Kroeger
dnl
dnl This file is part of suCGI.
dnl
dnl suCGI is free software: you can redistribute it and/or modify it under
dnl the terms of the GNU General Public License as published by the Free
dnl Software Foundation, either version 3 of the License, or (at your option)
dnl any later version.
dnl
dnl suCGI is distributed in the hope that it will be useful, but WITHOUT
dnl ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
dnl FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
dnl for more details.
dnl
dnl You should have received a copy of the GNU General Public License along
dnl with suCGI. If not, see <https://www.gnu.org/licenses>.
dnl
include(`macros.m4')dnl
/*
 * System-dependent values.
 *
 * DO NOT EDIT THIS FILE. Your changes will get overwritten.
 * You can override each macro in this file in config.h.
 *
 * Copyright 2023 Odin Kroeger
 *
 * This file is part of suCGI.
 *
 * suCGI is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * suCGI is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with suCGI. If not, see <https://www.gnu.org/licenses>.
 */

#if !defined(COMPAT_H)
#define COMPAT_H

#include <stdint.h>

#include "config.h"


/*
 * System defaults
 */
dnl FIXME: Add Illumos.

ifdef(`__SUCGI_HAVE_SYS_PARAM_H', `dnl
/* Whether sys/param.h is available. */
#if !defined(HAVE_SYS_PARAM)
#define HAVE_SYS_PARAM __SUCGI_HAVE_SYS_PARAM_H
#endif

')dnl
ifdef(`__SUCGI_HAVE_FEATURES_H', `dnl
/* Whether features.h is available. */
#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H __SUCGI_HAVE_FEATURES_H
#endif

')dnl
/* BSDs and Minix. */
#if defined(__DragonFly__)  || \
    defined(__FreeBSD__)    || \
    defined(__NetBSD__)     || \
    defined(__OpenBSD__)    || \
    defined(__MACH__)       || \
    defined(__minix)

#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif

#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif

#endif /* BSD systems */

/* GNU/Linux, GNU Hurd, and GNU/kFreeBSD */
#if defined(__GLIBC__)       || \
    defined(__GNU_LIBRARY__) || \
    defined(__UCLIBC__)

#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 1
#endif

#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 1
#endif

#endif /* GNU systems */

/* Unknown systems. */
#if !defined(HAVE_SYS_PARAM_H)
#define HAVE_SYS_PARAM_H 0
#endif

#if !defined(HAVE_FEATURES_H)
#define HAVE_FEATURES_H 0
#endif


/*
 * Headers
 */

/* Include sys/param.h if it's available. */
#if HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif

/* Include features.h if it's available. */
#if HAVE_FEATURES_H
#include <features.h>
#endif

/* Include features.h and sys/param.h in a round-about way, just in case. */
#include <limits.h>


/*
 * Data types
 */

/* Type that getgrouplist takes and returns group IDs as. */
#if !defined(GRP_T)
ifnempty(`__SUCGI_GRP_T', `dnl
#define GRP_T __SUCGI_GRP_T
', `dnl
#if defined(__MACH__) && __MACH__
#define GRP_T int
#define MAX_GRP_VAL INT_MAX
#else
#define GRP_T gid_t
#endif
')dnl
#endif

/* Type that setgroups takes the number of groups as. */
#if !defined(NGRPS_T)
ifnempty(`__SUCGI_NGRPS_T', `dnl
#define NGRPS_T __SUCGI_NGRPS_T
', `dnl
#if defined(__linux__) && __linux__
#define NGRPS_T size_t
#define MAX_NGRPS_VAL SIZE_MAX
#else
#define NGRPS_T int
#define MAX_NGRPS_VAL INT_MAX
#endif
')dnl
#endif


/*
 * Limits
 */

/*
 * If maximum values are calculated with MAXSVAL, then they
 * are probably too large if the system pads integer types;
 * though this is rare these days.
 */

/* Maximum value of uid_t. */
#if !defined(MAX_UID_VAL)
#define MAX_UID_VAL default(`__SUCGI_MAX_UID_VAL', `MAXSVAL(uid_t)')
#endif

/* Maximum value of gid_t. */
#if !defined(MAX_GID_VAL)
#define MAX_GID_VAL default(`__SUCGI_MAX_GID_VAL', `MAXSVAL(gid_t)')
#endif

/* Maximum value of GRP_T. */
#if !defined(MAX_GRP_VAL)
#define MAX_GRP_VAL default(`__SUCGI_MAX_GRP_VAL', `MAXSVAL(GRP_T)')
#endif

/* Maximum value of NGRPS_T. */
#if !defined(MAX_NGRPS_VAL)
#define MAX_NGRPS_VAL default(`__SUCGI_MAX_NGRPS_VAL', `MAXSVAL(NGRPS_T)')
#endif

#endif /* !defined(COMPAT_H) */
