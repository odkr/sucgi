dnl Template for the makefile.
dnl
dnl Edit this file, NOT the makefile itself.
dnl Then run ./configure to generate or ./config.status to update it.
dnl See docs/build.rst for details.
dnl
include(`macros.m4')dnl
.POSIX:

#
# DO NOT EDIT THIS FILE! IT MAY GET OVERWRITTEN!
#
# Edit makefile.m4 instead and then either run ./configure to generate the
# makefile or ./config.status to update it. See docs/build.rst for details.
#

#
# Special targets
#

all: sucgi

.PHONY: all analysis check clean distcheck distclean shellcheck

.IGNORE: analysis shellcheck


#
# Flags
#

ifnempty(`__CC', `dnl
CC = __CC
')dnl
CFLAGS = default(`__CFLAGS', `-O1')
ifnempty(`__ARFLAGS', `dnl
ARFLAGS = __ARFLAGS
')dnl
ifnempty(`__AR', `dnl
AR = __AR
')dnl
ifnempty(`__LDFLAGS', `dnl
LDFLAGS = __LDFLAGS
')dnl
ifnempty(`__LDLIBS', `dnl
LDLIBS = __LDLIBS
')dnl


#
# Build configuration
#

makefile: makefile.m4

compat.h: compat.h.m4

makefile compat.h:
	[ -e config.status ] && ./config.status $@ || m4 $@.m4 >$@


#
# Build
#

hdrs = attr.h compat.h config.h macros.h params.h types.h

objs = env.o error.o handler.o pair.o path.o priv.o str.o userdir.o

libs = libsucgi.a

libsucgi.a(env.o): env.c env.h libsucgi.a(str.o)

libsucgi.a(error.o): error.c error.h

libsucgi.a(pair.o): pair.c pair.h

libsucgi.a(path.o): path.c path.h libsucgi.a(str.o)

libsucgi.a(priv.o): priv.c priv.h

libsucgi.a(handler.o): handler.c handler.h libsucgi.a(pair.o path.o)

libsucgi.a(str.o): str.c str.h

libsucgi.a(userdir.o): userdir.c userdir.h libsucgi.a(str.o)

libsucgi.a($(objs)): $(hdrs)

libsucgi.a: libsucgi.a($(objs))

sucgi: main.c $(hdrs) $(libs)

libsucgi.a($(objs)):
	$(CC) $(LDFLAGS) -c -o $*.o $(CFLAGS) $*.c $(LDLIBS)
	$(AR) $(ARFLAGS) libsucgi.a $*.o
	rm -f $*.o

sucgi:
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ main.c $(libs) $(LDLIBS)


#
# Installation
#

ifnempty(`__DESTDIR', `DESTDIR = __DESTDIR
')dnl
PREFIX = default(`__PREFIX', `/usr/local')
www_grp = default(`__SUCGI_WWW_GRP', `www-data')
cgi_dir = default(`__SUCGI_CGI_DIR', `/usr/lib/cgi-bin')
libexec = $(DESTDIR)$(PREFIX)/libexec

$(libexec)/sucgi: sucgi
	mkdir -p $(libexec)
	cp sucgi $(libexec)
	chown 0:$(www_grp) $(libexec)/sucgi
	chmod u=rws,g=x,o= $(libexec)/sucgi

$(cgi_dir)/sucgi: $(libexec)/sucgi
	ln -s $(libexec)/sucgi $(cgi_dir)/sucgi

install: $(libexec)/sucgi $(cgi_dir)/sucgi

uninstall:
	rm -f $(cgi_dir)/sucgi $(libexec)/sucgi


#
# Tests
#

# tests/libutil.a
util_objs = tests/util/check.o tests/util/ftree.o tests/util/errlst.o\
	tests/util/longp.o tests/util/user.o tests/util/str.o\
	tests/util/tmp.o tests/util/trap.o

tests/libutil.a(tests/util/check.o): tests/util/check.c tests/util/check.h

tests/libutil.a(tests/util/ftree.o): tests/util/check.c tests/util/ftree.h

tests/libutil.a(tests/util/errlst.o): tests/util/errlst.c tests/util/errlst.h

tests/libutil.a(tests/util/longp.o): tests/util/longp.c tests/util/longp.h

tests/libutil.a(tests/util/user.o): tests/util/user.c tests/util/user.h

tests/libutil.a(tests/util/str.o): tests/util/str.c tests/util/str.h

tests/libutil.a(tests/util/tmp.o): tests/util/str.c tests/util/tmp.h\
	tests/libutil.a(tests/util/ftree.o)

tests/libutil.a(tests/util/trap.o): tests/util/trap.c tests/util/trap.h

tests/libutil.a: tests/libutil.a($(util_objs))

tests/libutil.a($(util_objs)):
	$(CC) $(LDFLAGS) -c -o $*.o $(CFLAGS) $*.c $(LDLIBS)
	$(AR) $(ARFLAGS) tests/libutil.a $*.o
	rm -f $*.o


# tests/libmock.so
mock_objs = tests/mock/unistd.o

ifnempty(`__SUCGI_SHARED_LIBS', `dnl
tests/mock/unistd.o: tests/mock/unistd.c tests/mock/unistd.h

tests/libmock.so: $(mock_objs)

$(mock_objs):
	$(CC) $(LDFLAGS) -c -o $@ -fpic $(CFLAGS) $< $(LDLIBS)

tests/libmock.so:
	$(CC) $(LDFLAGS) -shared -o $@ -fpic $(mock_objs) $(LDLIBS)

')dnl

# Unit tests
macro_test_bins = tests/ISSIGNED tests/NELEMS tests/SIGNEDMAX

env_test_bins = tests/envcopyvar tests/envisname tests/envrestore

handler_test_bins = tests/handlerfind

pair_test_bins = tests/pairfind

path_test_bins = tests/pathchkloc tests/pathreal tests/pathsuffix

priv_test_bins = tests/privdrop tests/privsuspend

str_test_bins = tests/copystr tests/getspecstrs tests/splitstr

userdir_test_bins = tests/userdirexp

unit_libs = libsucgi.a tests/libutil.a

unit_bins = $(macro_test_bins) $(env_test_bins) $(handler_test_bins)\
	$(pair_test_bins) $(path_test_bins) $(priv_test_bins)\
	$(str_test_bins) $(userdir_test_bins)

tests/ISSIGNED: tests/ISSIGNED.c

tests/NELEMS: tests/NELEMS.c

tests/SIGNEDMAX: tests/SIGNEDMAX.c

tests/envcopyvar: tests/envcopyvar.c

tests/envisname: tests/envisname.c

tests/envrestore: tests/envrestore.c tests/libutil.a(tests/util/str.o)

tests/handlerfind: tests/handlerfind.c

tests/pairfind: tests/pairfind.c params.h

tests/pathchkloc: tests/pathchkloc.c

tests/pathreal: tests/pathreal.c libsucgi.a(str.o) tests/libutil.a

tests/pathsuffix: tests/pathsuffix.c

tests/privdrop: tests/privdrop.c

tests/privsuspend: tests/privsuspend.c

tests/copystr: tests/copystr.c

tests/getspecstrs: tests/getspecstrs.c tests/libutil.a(tests/util/str.o)

tests/splitstr: tests/splitstr.c

tests/userdirexp: tests/userdirexp.c

$(env_test_bins): libsucgi.a(env.o)

$(handler_test_bins): libsucgi.a(handler.o)

$(pair_test_bins): libsucgi.a(pair.o)

$(path_test_bins): libsucgi.a(path.o)

$(priv_test_bins): libsucgi.a(priv.o)\
	tests/libutil.a(tests/util/str.o tests/util/user.o)

$(str_test_bins): libsucgi.a(str.o)

$(userdir_test_bins): $(hdrs) libsucgi.a(userdir.o)

$(unit_bins): tests/libutil.a(tests/util/check.o)

$(unit_bins):
	$(CC) $(LDFLAGS) -DCHECK $(CFLAGS) -o $@ $@.c $(unit_libs) $(LDLIBS)


# Utilities
util_bins = utils/badenv utils/badexec utils/uids utils/runpara utils/runas

utils: $(util_bins)


# Scripted tests
check_scripts = tests/scripts/main tests/scripts/error

script_bins = tests/main tests/error

tests/error: tests/error.c libsucgi.a(error.o)

tests/main: main.c $(hdrs) $(libs)

scripts/funcs.sh: utils/uids

tests/scripts/funcs.sh: scripts/funcs.sh

tests/scripts/error: tests/error

tests/scripts/main: utils/badenv utils/badexec utils/uids utils/runas

$(check_scripts): tests/main tests/scripts/funcs.sh

$(script_bins): $(hdrs) tests/util/check.h

tests/error:
	$(CC) $(LDFLAGS) -DCHECK $(CFLAGS) -o $@ $@.c $(libs) $(LDLIBS)

tests/main:
	$(CC) $(LDFLAGS) -DCHECK $(CFLAGS) -o $@ main.c $(libs) $(LDLIBS)


# Execution
check_bins = $(unit_bins) $(script_bins)

checks = $(check_scripts) $(unit_bins)

preloadvar = ifdef(`__SUCGI_UNAME',
	`ifelse(__SUCGI_UNAME, `Darwin',
		`DYLD_INSERT_LIBRARIES',
		`LD_PRELOAD')',
	`LD_PRELOAD')

runpara_flags = -ci75 -j8

checks: $(checks)

ifnempty(`__SUCGI_SHARED_LIBS', `dnl
check: utils/runpara $(checks) tests/libmock.so
', `dnl
check: utils/runpara $(checks)
')dnl

check:
ifnempty(`__SUCGI_SHARED_LIBS', `dnl
	[ "$$(id -u)" -eq 0 ]\
&& utils/runpara $(runpara_flags) $(checks)\
|| utils/runpara $(runpara_flags) $(preloadvar)=tests/libmock.so $(checks)
', `dnl
	utils/runpara $(runpara_flags) $(checks)
')dnl


#
# Cleanup
#

bins = sucgi $(check_bins) $(util_bins)

covclean: clean

clean:
	find . \( -name '*.a' -o -name '*.o' -o -name '*.so' \) -exec rm '{}' +
	rm -f $(bins)


#
# Distribution
#

package = sucgi
version = 0
dist_name = $(package)-$(version)
dist_ar = $(dist_name).tgz
dist_files = *.c *.h *.m4 README.rst LICENSE.txt \
	configure prepare cppcheck docs etc tests utils scripts

distclean: clean

$(dist_name): distclean

$(dist_ar): $(dist_name)

$(dist_ar).asc: $(dist_ar)

dist: $(dist_ar)

sigdist: dist $(dist_ar).asc

distcheck: dist

distclean:
	rm -f compat.h config.status makefile *.tgz
	rm -rf $(dist_name)

$(dist_name):
	mkdir $(dist_name)
	cp -a $(dist_files) $(dist_name)

$(dist_ar):
	tar -X etc/dist.excl -czf $(dist_ar) $(dist_name)

$(dist_ar).asc:
	gpg -qab --batch --yes $(dist_ar)

dist: $(dist_ar)
	rm -rf $(dist_name)

distcheck:
	tar -xzf $(dist_ar)
	$(dist_name)/configure
	cd $(dist_name) && $(MAKE) -e all check dist
	rm -rf $(dist_name)

#
# Static code analysis
#

inspect = *.h *.c
scripts = configure prepare scripts/* $(check_scripts)

ifnempty(`__SUCGI_CLANG_TIDY', `dnl
clang_tidy_flags = --config-file=etc/clang-tidy.yml

')dnl
ifnempty(`__SUCGI_CPPCHECK', `dnl
cppcheck_flags = --quiet --force --language=c --std=c99\
	--project=cppcheck/sucgi.cppcheck --library=posix\
	--library=cppcheck/bsd.cfg --library=cppcheck/funcs.cfg\
	--suppressions-list=cppcheck/suppr.txt --inline-suppr\
	--enable=all --addon=cppcheck/cert.py --addon=misra.py

')dnl
ifnempty(`__SUCGI_FLAWFINDER', `dnl
flawfinder_flags = --falsepositive --dataonly --quiet

')dnl
ifnempty(`__SUCGI_RATS', `dnl
rats_flags = --resultsonly --quiet --warning 3

')dnl
ifnempty(`__SUCGI_SHELLCHECK', `dnl
shellcheck_flags = -x

')dnl
analysis:
	! grep -i FIXME $(inspect)
ifnempty(`__SUCGI_CLANG_TIDY', `dnl
	__SUCGI_CLANG_TIDY $(clang_tidy_flags) $(inspect) -- -std=c99
')dnl
ifnempty(`__SUCGI_CPPCHECK', `dnl
	__SUCGI_CPPCHECK $(cppcheck_flags) $(inspect)
')dnl
ifnempty(`__SUCGI_FLAWFINDER', `dnl
	__SUCGI_FLAWFINDER $(flawfinder_flags) $(inspect)
')dnl
ifnempty(`__SUCGI_RATS', `dnl
	__SUCGI_RATS $(rats_flags) $(inspect)
')dnl

shellcheck:
	! grep -i FIXME $(scripts)
ifnempty(`__SUCGI_SHELLCHECK', `dnl
	__SUCGI_SHELLCHECK $(shellcheck_flags) $(scripts)
')dnl
