dnl Template for the makefile.
dnl
dnl Edit this file, NOT the makefile itself.
dnl Then run ./configure to generate or ./config.status to update it.
dnl See docs/build.rst for details.
dnl
include(`macros.m4')dnl
.POSIX:

#
# DO NOT EDIT THIS FILE! IT MAY GET OVERWRITTEN!
#
# Edit makefile.m4 instead and then either run ./configure to generate the
# makefile or ./config.status to update it. See docs/build.rst for details.
#

#
# Special targets
#

.PHONY:	all analysis check clean distcheck distclean shellcheck

.IGNORE: analysis

all: sucgi


#
# Flags
#

ifnempty(`__CC', `CC = __CC
')dnl
CFLAGS = default(`__CFLAGS', `-O2 -s')
ifnempty(`__ARFLAGS', `ARFLAGS = __ARFLAGS
')dnl
ifnempty(`__AR', `AR = __AR
')dnl
ifnempty(`__LDFLAGS', `LDFLAGS = __LDFLAGS
')dnl
ifnempty(`__LDLIBS', `LDLIBS = __LDLIBS
')dnl


#
# Common macros
#

hdrs = cattr.h compat.h macros.h max.h types.h


#
# Build
#

sucgi: main.c build.h config.h testing.h $(hdrs) funcs.a

funcs.a: funcs.a(env.o) funcs.a(error.o) funcs.a(file.o) funcs.a(handler.o) \
	funcs.a(path.o) funcs.a(priv.o) funcs.a(str.o) funcs.a(userdir.o)

funcs.a(env.o): env.c env.h $(hdrs) funcs.a(str.o)

funcs.a(error.o): error.c error.h $(hdrs)

funcs.a(file.o): file.c file.h $(hdrs) funcs.a(str.o)

funcs.a(path.o): path.c path.h $(hdrs) funcs.a(file.o) funcs.a(str.o)

funcs.a(priv.o): priv.c priv.h $(hdrs)

funcs.a(handler.o): handler.c handler.h $(hdrs) funcs.a(path.o)

funcs.a(str.o): str.c str.h $(hdrs)

funcs.a(userdir.o): userdir.c userdir.h $(hdrs)

sucgi:
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ main.c funcs.a $(LDLIBS)


#
# Installation
#

ifnempty(`__DESTDIR', `DESTDIR = __DESTDIR
')dnl
PREFIX = default(`__PREFIX', `/usr/local')
wwwgrp = default(`__SC_WWW_GRP', `www-data')
cgidir = default(`__SC_CGI_DIR', `/usr/lib/cgi-bin')
libexec = $(DESTDIR)$(PREFIX)/libexec

install: $(libexec)/sucgi $(cgidir)/sucgi

$(libexec)/sucgi: sucgi

$(cgidir)/sucgi: $(libexec)/sucgi

$(libexec)/sucgi:
	mkdir -p $(libexec)
	cp sucgi $(libexec)
	chown 0:$(wwwgrp) $(libexec)/sucgi
	chmod u=rws,g=x,o= $(libexec)/sucgi

$(cgidir)/sucgi:
	ln -s $(libexec)/sucgi $(cgidir)/sucgi

uninstall:
	rm -f $(cgidir)/sucgi $(libexec)/sucgi


#
# Build configuration
#

.SUFFIXES: .m4

makefile: makefile.m4

build.h: build.h.m4

compat.h: compat.h.m4

.m4:
	$(SHELL) ./config.status $@


#
# Tests
#

tool_bins = tools/badenv tools/badexec tools/ids tools/runpara tools/runas

priv_tools = tools/ids tools/runas

macro_check_bins = tests/ISSIGNED tests/MIN tests/NELEMS tests/SIGNEDMAX

other_check_bins = tests/env_is_name tests/env_restore tests/error \
	tests/file_is_exe tests/file_is_wexcl \
	tests/handler_lookup tests/main tests/path_check_wexcl \
	tests/path_check_in tests/path_suffix tests/priv_drop \
	tests/priv_suspend tests/str_cp tests/str_split \
	tests/userdir_resolve

check_scripts =	tests/error.sh tests/main.sh tests/path_check_wexcl.sh \
	tests/priv_drop.sh tests/priv_suspend.sh

checks = $(macro_check_bins) $(check_scripts) tests/env_is_name \
	tests/env_restore tests/file_is_exe tests/file_is_wexcl \
	tests/handler_lookup tests/path_check_in tests/path_suffix \
	tests/str_cp tests/str_split tests/userdir_resolve

runpara_flags =	-ci75 -j8

check: tools/runpara checks

checks: $(checks)

tools: $(tool_bins)

tests/ISSIGNED: tests/ISSIGNED.c $(hdrs)

tests/MIN: tests/MIN.c $(hdrs)

tests/NELEMS: tests/NELEMS.c $(hdrs)

tests/SIGNEDMAX: tests/SIGNEDMAX.c $(hdrs)

tests/env_is_name: tests/env_is_name.c $(hdrs) funcs.a(env.o)

tests/env_restore: tests/env_restore.c $(hdrs) funcs.a(env.o) funcs.a(str.o)

tests/error: tests/error.c $(hdrs) funcs.a(error.o)

tests/file_is_exe: tests/file_is_exe.c $(hdrs) funcs.a(file.o)

tests/file_is_wexcl: tests/file_is_wexcl.c $(hdrs) funcs.a(file.o)

tests/handler_lookup: tests/handler_lookup.c $(hdrs) funcs.a(handler.o)

tests/main: main.c build.h testing.h config.h $(hdrs) funcs.a

tests/path_check_wexcl: tests/path_check_wexcl.c $(hdrs) funcs.a(path.o)

tests/path_check_in: tests/path_check_in.c $(hdrs) funcs.a(path.o)

tests/path_suffix: tests/path_suffix.c $(hdrs) funcs.a(path.o)

tests/priv_drop: tests/priv_drop.c $(hdrs) funcs.a(priv.o)

tests/priv_suspend: tests/priv_suspend.c $(hdrs) funcs.a(priv.o)

tests/str_cp: tests/str_cp.c $(hdrs) funcs.a(str.o)

tests/str_split: tests/str_split.c $(hdrs) funcs.a(str.o)

tests/userdir_resolve: tests/userdir_resolve.c $(hdrs) funcs.a(userdir.o)

scripts/funcs.sh: tools/ids

tests/error.sh: tests/error tests/main scripts/funcs.sh

tests/main.sh: tests/main tools/badenv tools/badexec tools/ids scripts/funcs.sh

tests/path_check_wexcl.sh: tests/path_check_wexcl tests/main tools/ids scripts/funcs.sh

tests/priv_drop.sh: tests/priv_drop tests/main $(priv_tools) scripts/funcs.sh

tests/priv_suspend.sh: tests/priv_suspend tests/main $(priv_tools) scripts/funcs.sh

check:
	tools/runpara $(runpara_flags) $(checks)

$(macro_check_bins):
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $< $(LDLIBS)

$(other_check_bins):
	$(CC) $(LDFLAGS) -DCHECK $(CFLAGS) -o $@ $< funcs.a $(LDLIBS)


#
# Distribution
#

package = sucgi
version = 0
dist_name = $(package)-$(version)
dist_ar = $(dist_name).tgz
dist_files = *.c *.h *.env *.excl *.m4 *.sample README.rst LICENSE.txt \
	configure prepare cppcheck docs tests tools scripts

dist: $(dist_ar)

distcheck: dist

distclean: clean

sigdist: dist $(dist_ar).asc

$(dist_ar): distclean $(dist_name)

$(dist_ar).asc: $(dist_ar)

distclean: clean
	rm -f config.status build.h compat.h makefile

distcheck:
	tar -xzf $(dist_ar)
	$(dist_name)/configure
	cd $(dist_name) && make all check dist
	rm -rf $(dist_ar)

$(dist_name):
	mkdir $(dist_name)
	cp -r $(dist_files) $(dist_name)
	chmod -R u+rw,go= $(dist_name)

$(dist_ar):
	tar -X dist.excl -czf $(dist_ar) $(dist_name)

$(dist_ar).asc:
	gpg -qab --batch --yes $(dist_ar)


#
# Static code analysis
#

inspect	= *.h *.c

ifhascmd(`shellcheck', `dnl
scripts = configure prepare scripts/*.sh tests/*.sh

')dnl
ifhascmd(`clang-tidy', `dnl
clang_tidy_flags = --config-file=clang-tidy.yaml

')dnl
ifhascmd(`cppcheck', `dnl
cppcheck_flags = --quiet --force --language=c --std=c99 \
	--project=cppcheck/sucgi.cppcheck --library=posix \
	--library=cppcheck/bsd.cfg --library=cppcheck/funcs.cfg \
	--suppressions-list=cppcheck/suppr.txt --inline-suppr \
	--enable=all --addon=cppcheck/cert.py --addon=misra.py

')dnl
ifhascmd(`flawfinder', `dnl
flawfinder_flags = --falsepositive --dataonly --quiet

')dnl
ifhascmd(`rats', `dnl
rats_flags = --resultsonly --quiet --warning 3

')dnl
ifhascmd(`shellcheck', `dnl
shellcheck:
	shellcheck -x $(scripts)

')dnl
analysis:
ifhascmd(`clang-tidy',
`	clang-tidy $(clang_tidy_flags) $(inspect) -- -std=c99
')dnl
ifhascmd(`cppcheck',
`	cppcheck $(cppcheck_flags) $(inspect)
')dnl
ifhascmd(`flawfinder',
`	flawfinder $(flawfinder_flags) $(inspect)
')dnl
ifhascmd(`rats',
`	rats $(rats_flags) $(inspect)
')dnl


#
# Cleanup
#

bins = sucgi $(tool_bins) $(macro_check_bins) $(other_check_bins)

clean:
	rm -f funcs.a $(bins) $(dist_name).*
	rm -rf tmp-* $(dist_name)
	find . '(' \
           -name '*.o'					\
        -o -name '*.c.*'	-o -name 'a--.*'	\
        -o -name '*.ctu-info'	-o -name '*.dump'	\
        -o -name '*.gcda'	-o -name '*.gcno'	\
        -o -name '*.dSYM'				\
        -o -name '*.lock'	-o -name '*.lock'	\
       ')' -exec rm -rf '{}' +
