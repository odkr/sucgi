dnl Template for the makefile.
dnl
dnl Edit this file, NOT the makefile itself.
dnl Then run ./configure to generate or ./config.status to update it.
dnl See docs/build.rst for details.
dnl
include(`macros.m4')dnl
.POSIX:

#
# DO NOT EDIT THIS FILE! IT MAY GET OVERWRITTEN!
#
# Edit makefile.m4 instead and then either run ./configure to generate the
# makefile or ./config.status to update it. See docs/build.rst for details.
#

#
# Special targets
#

all: sucgi

.PHONY: all analysis check clean distcheck distclean mrproper shellcheck tidy

.IGNORE: analysis shellcheck

.SUFFIXES: .8 .gv .md .pdf .svg


#
# Flags
#

ifnempty(`__CC', `dnl
CC = __CC
')dnl
CFLAGS = default(`__CFLAGS', `-O1')
ifnempty(`__ARFLAGS', `dnl
ARFLAGS = __ARFLAGS
')dnl
ifnempty(`__AR', `dnl
AR = __AR
')dnl
ifnempty(`__LDFLAGS', `dnl
LDFLAGS = __LDFLAGS
')dnl
ifnempty(`__LDLIBS', `dnl
LDLIBS = __LDLIBS
')dnl
ifnempty(`__PIE', `dnl
pie = __PIE
')dnl


#
# Build configuration
#

makefile: makefile.m4

compat.h: compat.h.m4

makefile compat.h:
	[ -e config.status ] && ./config.status $@ || m4 $@.m4 >$@


#
# Build
#

libs = libsucgi.a

hdrs = attr.h compat.h config.h macros.h params.h types.h

objs = env.o error.o groups.o handler.o pair.o path.o priv.o str.o userdir.o

sucgi: main.c $(hdrs) $(libs)

libsucgi.a: $(objs)

env.o: env.c env.h

error.o: error.c error.h

groups.o: groups.c groups.h

pair.o: pair.c pair.h

path.o: path.c path.h

priv.o: priv.c priv.h

handler.o: handler.c handler.h

str.o: str.c str.h

userdir.o: userdir.c userdir.h

$(objs): $(hdrs)

sucgi:
	$(CC) $(LDFLAGS) $(CFLAGS) $(pie) -o$@ main.c $(libs) $(LDLIBS)

libsucgi.a: $(objs)
	$(AR) $(ARFLAGS) $@ $?


#
# Installation
#

ifnempty(`__DESTDIR', `DESTDIR = __DESTDIR
')dnl
PREFIX = default(`__PREFIX', `/usr/local')
www_grp = default(`__WWW_GRP', `www-data')
cgi_dir = default(`__CGI_DIR', `$(DESTDIR)$(PREFIX)/lib/cgi-bin')
libexec = $(DESTDIR)$(PREFIX)/libexec

$(libexec)/sucgi: sucgi
	mkdir -pm0755 $(libexec)
	chmod u=rwx,go= sucgi
	cp -p sucgi $(libexec)
	chown 0:$(www_grp) $(libexec)/sucgi
	chmod u=rws,g=x,o= $(libexec)/sucgi

$(cgi_dir)/sucgi:
	ln -s $(libexec)/sucgi $(cgi_dir)/sucgi

install: $(libexec)/sucgi $(cgi_dir)/sucgi

uninstall:
	rm -f $(libexec)/sucgi $(cgi_dir)/sucgi


#
# Utilities
#

utils_dir = utils

runpara = $(utils_dir)/runpara

uids = $(utils_dir)/uids

utils = $(runpara) $(uids)


#
# Scripts
#

scripts_dir = scripts

$(scripts_dir)/libutil.sh: $(uids)


#
# Tests
#

check_dir = tests

# tests/libutil.a
libutil = $(check_dir)/libutil.a

libutil_dir = $(libutil:.a=)

libutil_objs = $(libutil_dir)/abort.o $(libutil_dir)/array.o \
	$(libutil_dir)/dir.o $(libutil_dir)/path.o $(libutil_dir)/sigs.o \
	$(libutil_dir)/str.o $(libutil_dir)/tmpdir.o $(libutil_dir)/user.o

$(libutil): $(libutil_objs)

$(libutil_dir)/abort.o: $(libutil_dir)/abort.c $(libutil_dir)/abort.h

$(libutil_dir)/array.o: $(libutil_dir)/array.c $(libutil_dir)/array.h

$(libutil_dir)/dir.o: $(libutil_dir)/dir.c $(libutil_dir)/dir.h

$(libutil_dir)/path.o: $(libutil_dir)/path.c $(libutil_dir)/path.h

$(libutil_dir)/sigs.o: $(libutil_dir)/sigs.c $(libutil_dir)/sigs.h

$(libutil_dir)/str.o: $(libutil_dir)/str.c $(libutil_dir)/str.h

$(libutil_dir)/tmpdir.o: $(libutil_dir)/tmpdir.c $(libutil_dir)/tmpdir.h

$(libutil_dir)/user.o: $(libutil_dir)/user.c $(libutil_dir)/user.h

$(libutil_objs): $(libutil_dir)/types.h

$(libutil):
	$(AR) $(ARFLAGS) $@ $?

$(libutil_objs):
	$(CC) $(LDFLAGS) $(CFLAGS) -c -o$@ $*.c $(LDLIBS)

ifnempty(`__SHARED', `dnl
ifelse(__SHARED, `-dynamiclib', `dnl
# tests/libmock.dylib
libmock=$(check_dir)/libmock.dylib
', __SHARED, `-shared', `dnl
# tests/libmock.so
libmock=$(check_dir)/libmock.so
')dnl

libmock_dir = $(check_dir)/libmock

libmock_objs = $(libmock_dir)/mockstd.o

libmock_flags = $(CFLAGS) __PIC

$(libmock): $(libmock_objs)

$(libmock_dir)/mockstd.o: $(libmock_dir)/mockstd.c $(libmock_dir)/mockstd.h

$(libmock):
	$(CC) $(LDFLAGS) $(libmock_flags) __SHARED -o$@ $(libmock_objs) $(LDLIBS)

$(libmock_objs):
	$(CC) $(LDFLAGS) $(libmock_flags) -c -o$@ $*.c $(LDLIBS)

')dnl

# Unit tests
unit_bins = $(check_dir)/ISSIGNED $(check_dir)/NELEMS $(check_dir)/MAXSVAL \
	$(check_dir)/handler_find $(check_dir)/groups_comp \
	$(check_dir)/pair_find $(check_dir)/path_real \
	$(check_dir)/path_suffix $(check_dir)/path_is_sub \
	$(check_dir)/priv_drop $(check_dir)/priv_suspend \
	$(check_dir)/str_copy $(check_dir)/str_fmtspecs \
	$(check_dir)/str_split $(check_dir)/userdir_exp

unit_libs = $(libs) $(libutil)

$(check_dir)/ISSIGNED: $(check_dir)/ISSIGNED.c

$(check_dir)/NELEMS: $(check_dir)/NELEMS.c

$(check_dir)/MAXSVAL: $(check_dir)/MAXSVAL.c

$(check_dir)/env_get: $(check_dir)/env_get.c

$(check_dir)/env_is_name: $(check_dir)/env_is_name.c

$(check_dir)/env_restore: $(check_dir)/env_restore.c

$(check_dir)/env_setn: $(check_dir)/env_setn.c

$(check_dir)/handler_find: $(check_dir)/handler_find.c

$(check_dir)/groups_comp: $(check_dir)/groups_comp.c

$(check_dir)/pair_find: $(check_dir)/pair_find.c

$(check_dir)/path_real: $(check_dir)/path_real.c

$(check_dir)/path_suffix: $(check_dir)/path_suffix.c

$(check_dir)/path_is_sub: $(check_dir)/path_is_sub.c

$(check_dir)/priv_drop: $(check_dir)/priv_drop.c

$(check_dir)/priv_suspend: $(check_dir)/priv_suspend.c

$(check_dir)/str_copy: $(check_dir)/str_copy.c

$(check_dir)/str_fmtspecs: $(check_dir)/str_fmtspecs.c

$(check_dir)/str_split: $(check_dir)/str_split.c

$(check_dir)/userdir_exp: $(check_dir)/userdir_exp.c

$(unit_bins): $(unit_libs)

$(unit_bins):
	$(CC) $(LDFLAGS) $(CFLAGS) -o$@ $@.c $(unit_libs) $(LDLIBS)

# Utilities for scripted tests
check_utils_dir = $(check_dir)/utils

check_utils_bin = $(check_utils_dir)/badenv $(check_utils_dir)/badexec \
	$(check_utils_dir)/runas

# Scripted tests
check_script_flags = $(CFLAGS) $(pie) -DTESTING

check_script_dir = $(check_dir)/scripts

check_scripts = $(check_script_dir)/BUG $(check_script_dir)/error \
	$(check_script_dir)/main

check_script_bins = $(check_dir)/BUG $(check_dir)/error $(check_dir)/main

$(check_scripts): $(check_dir)/main $(check_script_dir)/libutil.sh

$(check_script_dir)/BUG: $(check_dir)/BUG

$(check_script_dir)/error: $(check_dir)/error

$(check_script_dir)/main: $(uids) $(check_utils_bin)

$(check_script_dir)/libutil.sh: $(scripts_dir)/libutil.sh

$(check_dir)/BUG: $(check_dir)/BUG.c

$(check_dir)/error: $(check_dir)/error.c

$(check_dir)/main: main.c

$(check_script_bins): $(libs) $(hdrs) $(libutil_dir)/types.h

$(check_dir)/main:
	$(CC) $(LDFLAGS) $(check_script_flags) -o$@ main.c $(libs) $(LDLIBS)

$(check_dir)/BUG $(check_dir)/error:
	$(CC) $(LDFLAGS) $(check_script_flags) -o$@ $@.c $(libs) $(LDLIBS)

# Execution
check_bins = $(unit_bins) $(check_script_bins)

checks = $(check_scripts) $(unit_bins)

ifelse(__UNAME, `Darwin', `dnl
preload = DYLD_INSERT_LIBRARIES

environ = MallocNanoZone=0
', `dnl
preload = LD_PRELOAD

environ =
')dnl

runpara_flags = -ci75 -j8

checks: $(checks)

ifnempty(`__SHARED', `dnl
check: $(runpara) $(checks) $(libmock)
', `dnl
check: $(runpara) $(checks)
')dnl

check:
ifnempty(`__SHARED', `dnl
	[ "$$(id -u)" -eq 0 ] \
&& $(environ) $(runpara) $(runpara_flags) $(checks) \
|| $(environ) $(runpara) $(runpara_flags) $(preload)=$(libmock) $(checks)
', `dnl
	$(environ) $(runpara) $(runpara_flags) $(checks)
')dnl


#
# Cleanup
#

bins = sucgi $(utils) $(check_utils_bin) $(check_bins) $(check_utils)

tidy:
	rm -f $(dist_name).tgz
	find . '(' \
	-name '*.bak' -o \
	-name '*.ctu-info' -o \
	-name '*.expand' -o \
	-name '*.dump' -o \
	-name '*.log' \
	')' -exec rm -f '{}' +
	find . -type d -name 'tmp-*' -exec rm -rf '{}' +

clean: tidy
	rm -f $(bins)
	find . '(' \
	-name '*.a' -o \
	-name '*.o' -o \
	-name '*.so' -o \
	-name '*.dylib' -o \
	-name '*.[0-9]' \
	')' -exec rm -f '{}' +

mrproper: clean
	rm -f cppcheck/build/* docs/callgraph.*
	find . '(' \
	-name '*.gcda' -o \
	-name '*.gcno' -o \
	-name '*.gcov' -o \
	-name '*.info' \
	')' -exec rm -f '{}' +


#
# Documentation
#

.gv.svg:
	dot -Tsvg -o$@ $<

.gv.pdf:
	dot -Tpdf -o$@ $<

.md.8:
	pandoc -Mdate="$$(date +"%B %d, %Y")" -stman -o$@ $(pandoc_flags) $<

callgraph_cflags = -DNDEBUG -O0 -fno-inline-functions

docs/callgraph.gv: main.c $(objs:.o=.c)
	$(MAKE) CFLAGS="-fdump-rtl-expand $(callgraph_cflags)" clean all
	egypt --callees main $(egypt_flags) *.expand >$@

docs/callgraph.pdf: docs/callgraph.gv

docs/callgraph.svg: docs/callgraph.gv


#
# Distribution
#

package = sucgi
version = syscmd(`
	awk "
		\$1 == \"#define\" && \$2 == \"VERSION\" {
			gsub(/[^0-9.]/, \"\", \$3);
			print \$3;
			exit;
		}
	" main.c
')
dist_name = $(package)-$(version)
dist_ar = $(dist_name).tgz
dist_files = *.c *.h *.m4 README.md LICENSE.txt \
	configure conf cppcheck docs installc probe tests utils scripts #man

distclean: mrproper

$(dist_name): distclean #man/sucgi.8

$(dist_ar): $(dist_name)

$(dist_ar).asc: $(dist_ar)

dist: distclean $(dist_ar)

sigdist: dist $(dist_ar).asc

distcheck: dist

sigdistcheck: sigdist distcheck

distclean:
	rm -f compat.h config.status makefile $(dist_ar)
	rm -rf $(dist_name)

$(dist_name):
	mkdir $(dist_name)
	find $(dist_files) -exec pathchk -Pp '{}' +
	cp -Rp $(dist_files) $(dist_name)

$(dist_ar):
	tar -X conf/dist.excl -czf $(dist_ar) $(dist_name)

$(dist_ar).asc:
	gpg -qab --batch --yes $(dist_ar)

dist: $(dist_ar)
	rm -rf $(dist_name)

distcheck:
	tar -xzf $(dist_ar)
	$(dist_name)/configure
	cd $(dist_name) && $(MAKE) -e all check dist
	rm -rf $(dist_name)


#
# Static code analysis
#

srcs = *.h *.c tests/*.c \
	$(libutil_dir)/*.h $(libutil_dir)/*.c \
	tests/libmock/*.h tests/libmock/*.c

scripts = configure installc $(scripts_dir)/* $(check_script_dir)/*

clang_tidy_flags = --quiet

cppcheck_flags = --quiet --force --language=c --std=c99 \
	--project=cppcheck/sucgi.cppcheck --library=posix \
	--library=cppcheck/c99.cfg --library=cppcheck/gnuc.cfg \
	--library=cppcheck/posix.cfg --library=cppcheck/bsd.cfg \
	--library=cppcheck/linux.cfg --library=cppcheck/sucgi.cfg \
	--suppress-xml=cppcheck/suppress.xml --inline-suppr \
	--enable=all --addon=cppcheck/cert.py --addon=misra.py

flawfinder_flags = --falsepositive --dataonly --quiet

rats_flags = --resultsonly --quiet --warning 3

shellcheck_flags = -x

analysis: compat.h
	clang-tidy $(clang_tidy_flags) $(srcs) -- -std=c99
	cppcheck $(cppcheck_flags) $(srcs)
	flawfinder $(flawfinder_flags) $(srcs)
	rats $(rats_flags) $(srcs)

shellcheck:
	shellcheck $(shellcheck_flags) $(scripts)

