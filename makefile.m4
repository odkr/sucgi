dnl Template for the makefile.
dnl
dnl Edit this file, NOT the makefile itself.
dnl Then run ./configure to generate or ./config.status to update it.
dnl See docs/build.rst for details.
dnl
include(`lib.m4')dnl
.POSIX:

#
# DO NOT EDIT THIS FILE! IT MAY GET OVERWRITTEN!
#
# Edit makefile.m4 instead and then either run ./configure to generate the
# makefile or ./config.status to update it. See docs/build.rst for details.
#

#
# Compiler variables
#

ifnempty(`__CC', `CC = __CC
')dnl
CFLAGS = default(`__CFLAGS', `-O2 -s')
ifnempty(`__ARFLAGS', `ARFLAGS = __ARFLAGS
')dnl
ifnempty(`__AR', `AR = __AR
')dnl
ifnempty(`__LDFLAGS', `LDFLAGS = __LDFLAGS
')dnl
ifnempty(`__LDLIBS', `LDLIBS = __LDLIBS
')dnl


#
# Headers
#

stdhdrs = cattr.h compat.h macros.h max.h types.h


#
# Test suite
#

tool_bins =	tools/badenv tools/badexec tools/ids \
		tools/runpara tools/runas

macro_bins =	tests/ISSIGNED tests/MIN tests/NELEMS tests/SIGNEDMAX

check_bins =	tests/env_is_name tests/env_restore tests/error \
		tests/file_is_exe tests/file_is_wexcl \
		tests/handler_lookup tests/main tests/path_check_wexcl \
		tests/path_check_in tests/path_suffix tests/priv_drop \
		tests/priv_suspend tests/str_cp tests/str_split \
		tests/userdir_resolve

check_scripts =	tests/error.sh tests/path_check_wexcl.sh \
		tests/priv_drop.sh tests/priv_suspend.sh

checks =	$(macro_bins) $(check_scripts) \
		tests/env_is_name tests/env_restore tests/file_is_exe \
		tests/file_is_wexcl tests/handler_lookup \
		tests/path_check_in tests/path_suffix tests/str_cp \
		tests/str_split tests/userdir_resolve

runpara_flags =	-ci75 -j8


#
# Files
#

scripts = configure scripts/*.sh tests/*.sh

bins = $(tool_bins) $(macro_bins) $(main_bins) $(check_bins)


#
# Static code analysis
#

inspect	=		*.h *.c

ifhascmd(`cppcheck', `dnl
cppcheck_flags =	--quiet --language=c --std=c99 \
			--project=cppcheck/sucgi.cppcheck --force \
			--library=posix --library=cppcheck/library.cfg \
			--suppressions-list=cppcheck/suppr.txt --inline-suppr \
			--enable=all --addon=cppcheck/cert.py --addon=misra.py

')dnl
ifhascmd(`flawfinder', `dnl
flawfinder_flags =	--falsepositive --dataonly --quiet

')dnl
ifhascmd(`rats', `dnl
rats_flags =		--resultsonly --quiet --warning 3

')dnl

#
# Distribution
#

package	= 	sucgi
version	=	0
dist_name =	$(package)-$(version)
dist_ar	=	$(dist_name).tgz
dist_files =	*.c *.h *.env *.excl *.m4 *.sample README.rst LICENSE.txt \
		configure cppcheck docs scripts tests tools


#
# Installer
#

ifnempty(`__DESTDIR', `DESTDIR = __DESTDIR
')dnl
PREFIX = default(`__PREFIX', `/usr/local')
install_dir = $(DESTDIR)$(PREFIX)
SC_WWW_GRP = default(`__SC_WWW_GRP', `www-data')
SC_CGI_DIR = default(`__SC_CGI_DIR', `/usr/lib/cgi-bin')


#
# Default target
#

all: sucgi


#
# Commands
#

.m4:
	$(SHELL) ./config.status $@

sucgi:
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ main.c lib.a $(LDLIBS)

$(macro_bins):
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $< tests/lib.o -lm $(LDLIBS)

$(check_bins):
	$(CC) $(LDFLAGS) -DCHECK $(CFLAGS) -o $@ $< lib.a tests/lib.o -lm $(LDLIBS)


#
# Prerequisites
#

.SUFFIXES: .m4

makefile: makefile.m4

build.h: build.h.m4

compat.h: compat.h.m4

tools: $(tool_bins)

checks: $(checks)

lib.a:	lib.a(env.o) lib.a(error.o) lib.a(file.o) lib.a(handler.o) \
	lib.a(path.o) lib.a(priv.o) lib.a(str.o) lib.a(userdir.o)

lib.a(env.o): env.c env.h $(stdhdrs) lib.a(str.o)

lib.a(error.o):	error.c error.h $(stdhdrs)

lib.a(file.o): file.c file.h $(stdhdrs) lib.a(str.o)

lib.a(path.o): path.c path.h $(stdhdrs) lib.a(file.o) lib.a(str.o)

lib.a(priv.o): priv.c priv.h $(stdhdrs)

lib.a(handler.o): handler.c handler.h $(stdhdrs) lib.a(path.o)

lib.a(str.o): str.c str.h $(stdhdrs)

lib.a(userdir.o): userdir.c userdir.h $(stdhdrs)

sucgi: main.c build.h config.h testing.h $(stdhdrs) lib.a

tests/lib.o: tests/lib.c tests/lib.h $(stdhdrs)

tests/ISSIGNED: tests/ISSIGNED.c $(stdhdrs) tests/lib.o

tests/MIN: tests/MIN.c $(stdhdrs) tests/lib.o

tests/NELEMS: tests/NELEMS.c $(stdhdrs) tests/lib.o

tests/SIGNEDMAX: tests/SIGNEDMAX.c $(stdhdrs) tests/lib.o

tests/env_is_name: tests/env_is_name.c $(stdhdrs) lib.a(env.o) tests/lib.o

tests/env_restore: tests/env_restore.c $(stdhdrs) lib.a(env.o) tests/lib.o

tests/error: tests/error.c $(stdhdrs) lib.a(error.o) tests/lib.o

tests/file_is_exe: tests/file_is_exe.c $(stdhdrs) lib.a(file.o) tests/lib.o

tests/file_is_wexcl: tests/file_is_wexcl.c $(stdhdrs) lib.a(file.o) tests/lib.o

tests/handler_lookup: tests/handler_lookup.c $(stdhdrs) lib.a(handler.o) tests/lib.o

tests/main: main.c build.h testing.h config.h $(stdhdrs) lib.a

tests/path_check_wexcl: tests/path_check_wexcl.c $(stdhdrs) lib.a(path.o) tests/lib.o

tests/path_check_in: tests/path_check_in.c $(stdhdrs) lib.a(path.o) tests/lib.o

tests/path_suffix: tests/path_suffix.c $(stdhdrs) lib.a(path.o) tests/lib.o

tests/priv_drop: tests/priv_drop.c $(stdhdrs) lib.a(priv.o) tests/lib.o

tests/priv_suspend: tests/priv_suspend.c $(stdhdrs) lib.a(priv.o) tests/lib.o

tests/str_cp: tests/str_cp.c $(stdhdrs) lib.a(str.o) tests/lib.o

tests/str_split: tests/str_split.c $(stdhdrs) lib.a(str.o) tests/lib.o

tests/userdir_resolve: tests/userdir_resolve.c $(stdhdrs) lib.a(userdir.o) tests/lib.o

tests/lib.sh: tools/ids

tests/error.sh: tests/error tests/lib.sh

tests/main.sh: tests/main tools/badexec tests/lib.sh

tests/path_check_wexcl.sh: tests/path_check_wexcl tools/ids tests/lib.sh

tests/priv_drop.sh: tests/priv_drop tests/main tools/ids tools/runas tests/lib.sh

tests/priv_suspend.sh: tests/priv_suspend tests/main tools/runas tests/lib.sh


#
# Cleanup
#

clean:
	rm -f lib.a sucgi $(bins) $(dist_name).*
	rm -rf tmp-* $(dist_name)
	find . '(' \
           -name '*.o'					\
        -o -name '*.c.*'	-o -name 'a--.*'	\
        -o -name '*.ctu-info'	-o -name '*.dump'	\
        -o -name '*.gcda'	-o -name '*.gcno'	\
        -o -name '*.dSYM'				\
        -o -name '*.lock'	-o -name '*.lock'	\
       ')' -exec rm -rf '{}' +


#
# Tests
#

check: tools checks
	tools/runpara $(runpara_flags) $(checks)


#
# Distribution
#

dist: $(dist_ar)

sigdist: dist $(dist_ar).asc

distclean: clean
	rm -f config.status build.h compat.h makefile

distcheck: $(dist_ar)
	tar -xzf $(dist_ar)
	$(dist_name)/configure
	cd $(dist_name) && cp config.h.sample config.h && make all check dist
	rm -rf $(dist_ar)

$(dist_name):
	mkdir $(dist_name)
	cp -r $(dist_files) $(dist_name)
	chmod -R u+rw,go= $(dist_name)

$(dist_ar): distclean $(dist_name)
	tar -X dist.excl -czf $(dist_ar) $(dist_name)

$(dist_ar).asc: $(dist_ar)
	gpg -qab --batch --yes $(dist_ar)


#
# Installation
#

$(install_dir)/libexec/sucgi: sucgi
	mkdir -p $(install_dir)/libexec
	cp sucgi $(install_dir)/libexec
	chown 0:$(SC_WWW_GRP) $(install_dir)/libexec/sucgi
	chmod u=rws,g=x,o= $(install_dir)/libexec/sucgi

$(SC_CGI_DIR)/sucgi: $(install_dir)/libexec/sucgi
	ln -s $(install_dir)/libexec/sucgi $(SC_CGI_DIR)/sucgi

install: $(install_dir)/libexec/sucgi $(SC_CGI_DIR)/sucgi

uninstall:
	rm -f $(SC_CGI_DIR)/sucgi $(install_dir)/libexec/sucgi


#
# Analysis
#

shellcheck:
ifhascmd(`shellcheck',
`	shellcheck -x $(scripts)
')dnl

analysis:
ifhascmd(`clang-tidy',
`	clang-tidy $(inspect) -- -std=c99
')dnl
ifhascmd(`cppcheck',
`	cppcheck $(cppcheck_flags) $(inspect)
')dnl
ifhascmd(`flawfinder',
`	flawfinder $(flawfinder_flags) $(inspect)
')dnl
ifhascmd(`rats',
`	rats $(rats_flags) $(inspect)
')dnl


#
# Special targets
#

.PHONY:	all analysis check clean dist distcheck distclean shellcheck

.IGNORE: analysis
