#!/bin/sh
# Run checks using different virtual machines.
#
# Copyright 2022 Odin Kroeger.
#
# This file is part of suCGI.
#
# suCGI is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# suCGI is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with suCGI. If not, see <https://www.gnu.org/licenses>.

# shellcheck disable=2015


#
# Defaults
#

# GCov binary that LCOV should use.
gcov=gcov

# GCov tool to use.
# shellcheck disable=2100
gcovtool=gcov-tool

# Where to store GCov files.
gcovdir=-

# Where to store the lcov.info file.
lcovinfo=-

# Where to store the LCov report.
htmldir=cov


#
# Initialiation
#

set -Ceu
scripts_dir="$(cd -P "$(dirname -- "$0")" && pwd)"
src_dir="$(dirname -- "$scripts_dir")"
# shellcheck disable=2034
readonly scripts_dir src_dir
# shellcheck disable=1091
. "$src_dir/scripts/funcs.sh" || exit
init || exit
cd -P "$src_dir" || exit
tmpdir tmp .


#
# Constants
#

# Current working directory.
cwd="$(pwd)"
readonly cwd

# The user who should own logs and coverage data.
if [ "$(id -u)" -eq 0 ]
then user="$(owner "$src_dir")"
else user="$(id -un)"
fi
readonly user

# The primary group of that user.
group="$(id -gn "$user")"
readonly group


#
# Functions
#

mylogged() {
	: "${cwd:?}"
	: "${user:?}"
	: "${group:?}"

	logged -d"$cwd" -u"$user" -g"$group" -- "$@"
}


#
# Options
#

OPTIND=1 OPTARG='' opt=''
# shellcheck disable=2034
while getopts DG:H:L:g:hqt:v opt; do
	# shellcheck disable=2154
	case $opt in
	(h) exec cat <<EOF
$prog_name - generate coverage reports

Usage:       $prog_name [-q] [-HDIR] [-LFILE]
             $prog_name -h

Options:
    -G DIR   Store GCov files in DIR (default: $gcovdir).
    -H DIR   Store HTML report in DIR (default: $htmldir).
    -L FILE  Store LCov data in FILE (default: $lcovinfo).
    -g COMM  GCov to use (default: $gcov).
    -t COMM  GCov tool to use (default $gcovtool).
    -v       Be verbose.
    -q       Be quiet.
    -h       Show this help screen.

    -G, -H, and -L are mutually exclusive.
EOF
	    ;;
	(D) set -x ;;
	(G) gcovdir="$OPTARG" htmldir=- lcovinfo=- ;;
	(H) htmldir="$OPTARG" gcovdir=- lcovinfo=- ;;
	(L) lcovinfo="$OPTARG" htmldir=- gcovdir=- ;;
	(g) gcov="$OPTARG" ;;
	(t) gcovtool="$OPTARG" ;;
	(q) quiet=y ;;
	(v) verbose=y ;;
	(*) exit 1
	esac
done
shift $((OPTIND - 1))
unset opt

[ $# -ne 0 ] && err -s64 'too many operands'

case $gcovdir in
(-|/*)	: ;;
(*)	gcovdir="$cwd/$gcovdir"
esac
readonly gcovdir

case $lcovinfo in
(-|/*)	: ;;
(*)	lcovinfo="$cwd/$lcovinfo"
esac
readonly lcovinfo

case $htmldir in
(-|/*)	: ;;
(*)	htmldir="$cwd/$htmldir"
esac
readonly htmldir


#
# Main
#

uid="$(id -u)"
[ "$uid" -eq 0 ] ||
warn "coverage data collected as regular user is inaccurate."

warn -q 'copying sources ...'
m4 makefile.m4 > "$TMPDIR/makefile"
distdir="$TMPDIR/dist"
make -f "$TMPDIR/makefile" dist_name="$distdir" "$distdir"
cd -P "$distdir" || exit

warn -q 'configuring build ... '
CFLAGS=-O1 logged ./configure

warn -q 'compiling tools and test libraries ...'
mylogged make -e tools tests/objs.a tests/mock.so

warn -q 'compiling tests ...'
mylogged make -e CFLAGS=--coverage all checks

warn -q 'adapting environment ...'
export PATH="$distdir/tools:$distdir/tests:$PATH"
eval "$(main -C | grep -vE '^PATH=')"

# Permissions changing mid-flight confuses LLVM.
case $(uname) in
(Darwin) export DYLD_INSERT_LIBRARIES=tests/mock.so ;;
(*)      export LD_PRELOAD=tests/mock.so ;;
esac

if ! reguser="$(reguser "$MIN_UID" "$MAX_UID" "$MIN_GID" "$MAX_GID")" ||
   ! [ "$reguser" ]
then err 'no regular user found.'
fi

if ! reggroup="$(id -gn "$reguser")" ||
   ! [ "$reggroup" ]
then err 'no regular group found.'
fi

# Neither umask 0 nor extensive write privileges work, because gcov and
# llvm-cov both appear to ignore permissions, main also calls umask, and
# permissions would have to be changed while the tests are running.
if [ "$uid" -eq 0 ]
then
	chown -R "$reguser:$reggroup" "$TMPDIR"
	chmod -R ugo+r "$TMPDIR"
	find "$TMPDIR" -type d -exec chmod ug+s,o+x '{}' +
fi

warn -q 'collecting coverage data ...'

if	[ "$htmldir"  != - ] || [ "$lcovinfo" != - ]
then
	geninfo --gcov-tool "$gcov" -q -o initial.info	\
	--ignore-errors gcov,source			\
	--exclude '*/tests/*'				\
	--exclude '/usr/*' --exclude '/Library/*' .	&&
	lcov --gcov-tool "$gcov" -q -o lcov.info -a initial.info
fi

find tests -type f '(' -perm +=x -o -name '*.sh' ')' |
while read -r check
do
	case $check in
	(*/funcs.sh) continue ;;
	(*.sh)       : ;;
	(*.*)        continue ;;
	(*)         [ -e "$check.sh" ] && continue
	esac

	basename="$(basename "$check")"
	infofile="$basename.info"

	exstatus=0
	mylogged "$check" || exstatus=$?

	inlist -eq "$exstatus" 0 75 || exit 69

	if [ "$htmldir"  != - ] || [ "$lcovinfo" != - ]
	then
		geninfo --gcov-tool "$gcov" -q -o "$infofile"		\
			--ignore-errors gcov,source			\
			--exclude '*/tests/*'				\
			--exclude '/usr/*' --exclude '/Library/*' . &&
		lcov --gcov-tool "$gcov" -q -o lcov.info -a "$infofile"
	fi
done

if [ "$gcovdir" != - ]
then
	warn -q 'saving GCov files in %s ...' "$gcovdir"

	mkdir -p "$gcovdir"
	find . -maxdepth 1 -type f -name '*.c' -exec "$gcov" '{}' + >/dev/null

	find . -type f -name '*.c.gcov' |
	while read -r fname
	do
		dir="$(dirname "$fname")"
		mkdir -p "$gcovdir/$dir"
		mv -f "$fname" "$gcovdir/$dir"
	done

	[ "$uid" -eq 0 ] && chown -R "$user:$group" "$gcovdir"
fi

if [ "$htmldir" != - ]
then
	warn -q 'saving HTML report to %s ...' "$htmldir"
	genhtml -q -o "$htmldir" lcov.info
	[ "$uid" -eq 0 ] && chown -R "$user:$group" "$htmldir"
fi

if [ "$lcovinfo" != - ]
then
	warn -q 'saving LCOV data to %s ...' "$lcovinfo"
	mv -f lcov.info "$lcovinfo"
	[ "$uid" -eq 0 ] && chown -R "$user:$group" "$lcovinfo"
fi
