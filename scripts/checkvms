#!/bin/sh
# Run checks using different virtual machines.
#
# Copyright 2023 Odin Kroeger.
#
# This file is part of suCGI.
#
# suCGI is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# suCGI is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with suCGI. If not, see <https://www.gnu.org/licenses>.

# shellcheck disable=2015


#
# Defaults
#

# Virtual machines to test.
readonly vms='aristides diotima euthyphro'

# Branch to run tests on.
branch=devel

# Check command to run.
check="
	if command -v sudo >/dev/null
	then sudo scripts/checkall
	elif command -v doas >/dev/null
	then doas scripts/checkall
	else scripts/checkall
	fi
"

# Repository directory on the virtual machine.
dir='repos/sucgi'

# Be more quiet?
quiet=

# Be verbose?
verbose=

# How many seconds to wait for a VM to become reachable.
timeout=120


#
# Initialiation
#

set -Cefu
tools_dir="$(cd -P "$(dirname -- "$0")" && pwd)"
src_dir="$(dirname -- "$tools_dir")"
# shellcheck disable=2034
readonly tools_dir src_dir
# shellcheck disable=1091
. "$tools_dir/funcs.sh" || exit
init || exit
tmpdir


#
# Constants
#

# Current working directory
cwd="$(pwd)" || exit
readonly cwd


#
# Functions
#

utmquit() {
	utmstoplastvm
	if command -v osascript >/dev/null 2>&1
	then osascript -e 'tell application "UTM" to quit'
	else killall UTM
	fi
}

utmquitatexit() {
	if [ "${utmpid-x}" = x ] && [ "${utmpid-}" != x ]
	then
		utmpid="$(
			ps -xo pid=,comm= |
			awk '$2 ~ /\/UTM$/ {print $1; exit}'
		)"
		readonly utmpid
	fi

	if ! [ "$utmpid" ]
	then
		case $cleanup in
		(*utmquit*) : ;;
		(*) cleanup="utmquit; ${cleanup-}"
		esac
	fi
}

utmstatus() {
	utmquitatexit
	utmctl status "${1:?}"
}


utmstoplastvm() {
	if	[ "${lastvm-}" ]			&&
		[ "$(utmstatus "$lastvm")" = started ]	>/dev/null 2>&1
	then
		catch=
		utmctl stop "$lastvm"
		lastvm=
		catch=x
		if [ "$caught" ]
		then kill -s "$caught" "$$"
		fi
	fi
}

utmstartvm() {
	utmquitatexit
	if	status="$(utmstatus "${1:?}")"	&&
		[ "$status" = stopped ]
	then
		lastvm="$1"
		utmctl start "$1"
	fi
}



#
# Options
#

OPTIND=1 OPTARG='' opt=''
# shellcheck disable=2034
while getopts Db:c:d:hqt:v opt; do
	# shellcheck disable=2154
	case $opt in
	(h) exec cat <<EOF
$prog_name - run tests with different virtual machines

Usage:         $prog_name [VM ...]
               $prog_name -h

Operands:
    VM         A virtual machine name.

Options:
    -b BRANCH  Branch to checkout (default: $branch).
    -c CHECK   Check to run (default: $check).
    -d DIR     Repository directory on VM (default: $dir).
    -t N       Wait at most N seconds for VM to boot (default: $timeout).
    -q         Be more quiet.
    -v         Be verbose, but do not log runs.
    -h         Show this help screen.
EOF
	    ;;
	(D) set -x ;;
	(b) branch="$OPTARG" ;;
	(c) check="$OPTARG" ;;
	(d) dir="$OPTARG" ;;
	(t) timeout="$OPTARG" ;;
	(q) quiet=y ;;
	(v) verbose=y ;;
	(*) exit 1
	esac
done
shift $((OPTIND - 1))
unset opt

# shellcheck disable=2086
[ $# -eq 0 ] && set -- $vms

readonly comm="
	set -ex
	cd \"$dir\"
	git stash
	git pull
	git checkout \"$branch\"
	$check
"


#
# Main
#

cleanup="warn 'shutting down ...'; ${cleanup-}"

failures=
for vm
do
	warn 'checking with %s ... ' "$vm"

	[ "$verbose" ] && warn -q 'waiting for %s to reply ...' "$vm"

	utmstartvm "$vm"

	trap 'catch ALRM' ALRM
	pid="$$"
	( sleep "$timeout" & wait $! && kill -s ALRM "$pid"; ) & alarm=$!

	while ! [ "$caught" ]
	do ssh "$vm" true >/dev/null 2>&1 && break
	done

	[ "$caught" = ALRM ] && err 'connection failure.'
	kill "$alarm"

	logfile="$TMPDIR/check$vm.log"
	if ! (
		[ "$verbose" ] || exec >"$logfile" 2>&1

		# shellcheck disable=2029
		ssh "$vm" "$comm"
	)
	then
		if ! [ "$verbose" ]
		then
			warn 'testing with %s failed.' "$vm"
			warn 'see %s for details.' "$(basename "$logfile")"
			[ -e "$logfile" ] && mv "$logfile" "$cwd"
		fi
		failures="$failures $vm"
	fi

	utmstoplastvm
done

if [ "$failures" ]
then err -s70 'failures: %s' "${failures# }"
else warn -q 'all tests passed.'
fi
