dnl Template for the makefile.
dnl
dnl Edit this file, NOT the makefile itself.
dnl Then run ./configure to generate or ./config.status to update it.
dnl See docs/build.rst for details.
dnl
ifdef(`__srcdir', `include(__srcdir/macros.m4)', `include(`macros.m4')')dnl
.POSIX:

#
# DO NOT EDIT THIS FILE! IT WILL GET OVERWRITTEN!
#
# This file has been automatically generated by ./configure.
# Edit makefile.in instead and then run ./config.status to update this file.
# See docs/build.md for details.
#

#
# Special targets
#

all: sucgi

.PHONY: all dist distcheck distclean man \
	install install-strip installdirs uninstall \
	tidy mostlyclean clean mrproper maintainer-clean \
	check analysis shellcheck

.IGNORE: analysis shellcheck

.SUFFIXES:


#
# Flags and tools
#

SHELL = /bin/sh
ifnempty(`__CC', `dnl
CC = __CC
')dnl
CFLAGS = -I. default(`__CFLAGS', `-O1')
ifnempty(`__ARFLAGS', `dnl
ARFLAGS = __ARFLAGS
')dnl
ifnempty(`__AR', `dnl
AR = __AR
')dnl
ifnempty(`__LDFLAGS', `dnl
LDFLAGS = __LDFLAGS
')dnl
ifnempty(`__LDLIBS', `dnl
LDLIBS = __LDLIBS
')dnl
ifnempty(`__pieflags', `dnl
pieflags = __pieflags
')dnl


#
# Build configuration
#

srcdir = default(`__srcdir', `.')

makefile: $(srcdir)/makefile.in

compat.h: $(srcdir)/compat.h.in

makefile compat.h:
	if [ -e config.status ]; then ./config.status --gen=$@; fi


#
# Build
#

libs = libsucgi.a

hdrs = compat.h config.h $(srcdir)/attr.h $(srcdir)/macros.h \
	$(srcdir)/params.h $(srcdir)/types.h

objs = env.o error.o groups.o handler.o pair.o path.o priv.o str.o userdir.o

flags = $(CFLAGS) $(pieflags)

.SUFFIXES: .c .o

sucgi: $(srcdir)/main.c $(hdrs) $(libs)

libsucgi.a: $(objs)

env.o: $(srcdir)/env.c $(srcdir)/env.h

error.o: $(srcdir)/error.c $(srcdir)/error.h

groups.o: $(srcdir)/groups.c $(srcdir)/groups.h

pair.o: $(srcdir)/pair.c $(srcdir)/pair.h

path.o: $(srcdir)/path.c $(srcdir)/path.h

priv.o: $(srcdir)/priv.c $(srcdir)/priv.h

handler.o: $(srcdir)/handler.c $(srcdir)/handler.h

str.o: $(srcdir)/str.c $(srcdir)/str.h

userdir.o: $(srcdir)/userdir.c $(srcdir)/userdir.h

$(objs): $(hdrs)

sucgi:
	$(CC) $(LDFLAGS) $(flags) -o$@ $(srcdir)/main.c $(libs) $(LDLIBS)

libsucgi.a: $(objs)
	$(AR) $(ARFLAGS) $@ $?

$(objs):
	$(CC) $(LDFLAGS) $(CFLAGS) -c -o$@ $(srcdir)/$(@:.o=.c) $(LDLIBS)


#
# Documentation
#

manext = default(`__manext', `8')
manpages = sucgi.$(manext)

DOT = dot

EGYPT = egypt
EGYPTCFLAGS = -DNDEBUG -O0 -fno-inline-functions

PANDOC = pandoc
PANDOCFLAGS = -Mdate="$$(date +"%B %d, %Y")"

.SUFFIXES: .gv .pdf .svg

man: sucgi.$(manext)

sucgi.$(manext): docs/sucgi.md

.gv.svg:
	$(DOT) $(DOTFLAGS) -Tsvg -o$@ $<

.gv.pdf:
	$(DOT) $(DOTFLAGS) -Tpdf -o$@ $<

$(manpages):
	$(PANDOC) $(PANDOCFLAGS) -stman -o$@ docs/$(@:.$(manext)=.md)

docs/callgraph.gv: $(srcdir)/main.c $(objs:.o=.c)
	$(MAKE) -e CFLAGS="-fdump-rtl-expand $(EGYPTCFLAGS)" clean all
	$(EGYPT) --callees main $(EGYPTFLAGS) *.expand >$@

docs/callgraph.pdf: docs/callgraph.gv

docs/callgraph.svg: docs/callgraph.gv


#
# Installation
#

ifhascmd(`install', `dnl
INSTALL = install
INSTALL_PROGRAM = $(INSTALL)
', `dnl
INSTALL = cp -p
INSTALL_PROGRAM = $(INSTALL)
')dnl
ifnempty(`__DESTDIR', `DESTDIR = __DESTDIR
')dnl

PREFIX = default(`__PREFIX', `/usr/local')

wwwgrp = default(`__wwwgrp', `www-data')
cgidir = default(`__cgidir', `/usr/lib/cgi-bin')
prefix = default(`__prefix', `$(PREFIX)')
exec_prefix = default(`__exec_prefix', `$(prefix)')
libexecdir = default(`__libexecdir', `$(exec_prefix)/libexec')
datarootdir = default(`__datarootdir', `$(prefix)/share')
mandir = default(`__mandir', `$(datarootdir)/man')
man8dir = default(`__man8dir', `$(mandir)/man8')

install: installdirs $(libexecdir)/sucgi $(cgidir)/sucgi

# sucgi is compiled with -s at any rate.
install-strip: install

$(libexecdir)/sucgi: sucgi

$(cgidir)/sucgi:

$(libexecdir)/sucgi:
	chmod u=rwx,go= sucgi
	$(INSTALL_PROGRAM) sucgi $(DESTDIR)$(libexec)
	chown 0:$(wwwgrp) $(DESTDIR)$(libexecdir)/sucgi
	chmod u=rws,g=x,o= $(DESTDIR)$(libexecdir)/sucgi

$(cgidir)/sucgi:
	ln -s $(DESTDIR)$(libexecdir)/sucgi $(DESTDIR)$(cgidir)/sucgi

installdirs:
	mkdir -pm0755 $(DESTDIR)$(cgidir) $(DESTDIR)$(libexecdir)

uninstall:
	rm -f $(DESTDIR)$(libexecdir)/sucgi $(DESTDIR)$(cgidir)/sucgi


#
# Utilities
#

utilsdir = utils

utilssrcdir = $(srcdir)/$(utilsdir)

RUNPARA = $(utilsdir)/runpara

utils = $(RUNPARA) $(utilsdir)/uids

$(RUNPARA): $(utilssrcdir)/runpara.c

$(utilsdir)/uids: $(utilssrcdir)/uids.c

$(utils): $(utilsdir)/.sentinel

$(RUNPARA) $(utilsdir)/uids:
	$(CC) $(LDFLAGS) $(CFLAGS) $(pieflags) -o$@ $(srcdir)/$@.c $(LDLIBS)

libutil.sh:
	cp -p "$(srcdir)"/libutil.sh .


#
# Tests
#

checkdir = tests

# tests/libutil.a
libutil = $(checkdir)/libutil.a

libutildir = $(checkdir)/libutil

libutilsrcdir = $(srcdir)/$(libutildir)

libutilobjs = $(libutildir)/abort.o $(libutildir)/array.o \
	$(libutildir)/dir.o $(libutildir)/path.o $(libutildir)/sigs.o \
	$(libutildir)/str.o $(libutildir)/tmpdir.o $(libutildir)/user.o

$(libutil): $(libutilobjs)

$(libutildir)/abort.o: $(libutilsrcdir)/abort.c $(libutilsrcdir)/abort.h

$(libutildir)/array.o: $(libutilsrcdir)/array.c $(libutilsrcdir)/array.h

$(libutildir)/dir.o: $(libutilsrcdir)/dir.c $(libutilsrcdir)/dir.h

$(libutildir)/path.o: $(libutilsrcdir)/path.c $(libutilsrcdir)/path.h

$(libutildir)/sigs.o: $(libutilsrcdir)/sigs.c $(libutilsrcdir)/sigs.h

$(libutildir)/str.o: $(libutilsrcdir)/str.c $(libutilsrcdir)/str.h

$(libutildir)/tmpdir.o: $(libutilsrcdir)/tmpdir.c $(libutilsrcdir)/tmpdir.h

$(libutildir)/user.o: $(libutilsrcdir)/user.c $(libutilsrcdir)/user.h

$(libutilobjs): $(libutilsrcdir)/types.h $(libutildir)/.sentinel

$(libutildir)/.sentinel: $(checkdir)/.sentinel

$(libutil):
	$(AR) $(ARFLAGS) $@ $?

$(libutilobjs):
	$(CC) $(LDFLAGS) $(CFLAGS) -c -o$@ $(srcdir)/$(@:.o=.c) $(LDLIBS)

ifnempty(`__sharedflag', `dnl
ifelse(__sharedflag, `-dynamiclib', `dnl
# tests/libmock.dylib
libmock = $(checkdir)/libmock.dylib
', __sharedflag, `-shared', `dnl
# tests/libmock.so
libmock = $(checkdir)/libmock.so
')dnl

libmockdir = $(checkdir)/libmock

libmocksrcdir = $(srcdir)/$(libmockdir)

libmockobjs = $(libmockdir)/mockstd.o

picflags = default(`__picflags')

sharedflag = default(`__sharedflag')

ifcflag(`-fsanitize=', `dnl
# ASan breaks pre-loading on some systems.
libmockflags = $(CFLAGS) $(picflags) -fno-sanitize=all', `dnl
libmockflags = $(CFLAGS) $(picflags)
')

$(libmock): $(libmockobjs)

$(libmockdir)/mockstd.o: $(libmocksrcdir)/mockstd.c $(libmocksrcdir)/mockstd.h

$(libmockobjs): $(libmockdir)/.sentinel

$(libmockdir)/.sentinel: $(checkdir)/.sentinel

$(libmock):
	$(CC) $(LDFLAGS) $(libmockflags) $(sharedflag) -o$@ \
$(libmockobjs) $(LDLIBS)

$(libmockobjs):
	$(CC) $(LDFLAGS) $(libmockflags) -c -o$@ $(srcdir)/$(@:.o=.c) $(LDLIBS)

')dnl

# Unit tests
checksrcdir = $(srcdir)/$(checkdir)

unittests = $(checkdir)/ISSIGNED $(checkdir)/NELEMS $(checkdir)/MAXSVAL \
	$(checkdir)/env_get $(checkdir)/env_is_name \
	$(checkdir)/env_restore $(checkdir)/env_setn \
	$(checkdir)/handler_find $(checkdir)/groups_comp \
	$(checkdir)/pair_find $(checkdir)/path_real \
	$(checkdir)/path_suffix $(checkdir)/path_is_sub \
	$(checkdir)/priv_drop $(checkdir)/priv_suspend \
	$(checkdir)/str_copy $(checkdir)/str_get_fmts \
	$(checkdir)/str_split $(checkdir)/userdir_exp

unitlibs = $(libs) $(libutil)

unitflags = $(CFLAGS) $(pieflags)

$(checkdir)/ISSIGNED: $(checksrcdir)/ISSIGNED.c

$(checkdir)/NELEMS: $(checksrcdir)/NELEMS.c

$(checkdir)/MAXSVAL: $(checksrcdir)/MAXSVAL.c

$(checkdir)/env_get: $(checksrcdir)/env_get.c

$(checkdir)/env_is_name: $(checksrcdir)/env_is_name.c

$(checkdir)/env_restore: $(checksrcdir)/env_restore.c

$(checkdir)/env_setn: $(checksrcdir)/env_setn.c

$(checkdir)/handler_find: $(checksrcdir)/handler_find.c

$(checkdir)/groups_comp: $(checksrcdir)/groups_comp.c

$(checkdir)/pair_find: $(checksrcdir)/pair_find.c

$(checkdir)/path_real: $(checksrcdir)/path_real.c

$(checkdir)/path_suffix: $(checksrcdir)/path_suffix.c

$(checkdir)/path_is_sub: $(checksrcdir)/path_is_sub.c

$(checkdir)/priv_drop: $(checksrcdir)/priv_drop.c

$(checkdir)/priv_suspend: $(checksrcdir)/priv_suspend.c

$(checkdir)/str_copy: $(checksrcdir)/str_copy.c

$(checkdir)/str_get_fmts: $(checksrcdir)/str_get_fmts.c

$(checkdir)/str_split: $(checksrcdir)/str_split.c

$(checkdir)/userdir_exp: $(checksrcdir)/userdir_exp.c

$(unittests): $(unitlibs) $(checkdir)/.sentinel

$(unittests):
	$(CC) $(LDFLAGS) $(unitflags) -o$@ $(srcdir)/$@.c $(unitlibs) $(LDLIBS)

# Utilities for scripted tests
checkutilsdir = $(checkdir)/utils

checkutils = $(checkutilsdir)/badenv $(checkutilsdir)/badexec \
	$(checkutilsdir)/runas

$(checkutils): $(checkutilsdir)/.sentinel

$(checkutilsdir)/.sentinel: $(checkdir)/.sentinel

$(checkutils):
	$(CC) $(LDFLAGS) $(CFLAGS) $(pieflags) -o$@ $(srcdir)/$@.c $(LDLIBS)

# Wrappers for scripted tests
wrappersdir = $(checkdir)/wrappers

wrappersrcdir = $(srcdir)/$(wrappersdir)

wrappers = $(wrappersdir)/BUG $(wrappersdir)/error $(wrappersdir)/main

wrapperflags = $(CFLAGS) $(pieflags) -DTESTING

$(wrappersdir)/BUG: $(wrappersrcdir)/BUG.c

$(wrappersdir)/error: $(wrappersrcdir)/error.c

$(wrappers): $(libs) $(hdrs) \
	$(libutilsrcdir)/types.h $(wrappersdir)/.sentinel

$(wrappersdir)/.sentinel: $(checkdir)/.sentinel

$(wrappers):
	$(CC) $(LDFLAGS) $(wrapperflags) -o$@ $(srcdir)/$@.c $(libs) $(LDLIBS)

# Fake binaries
fakesdir = $(checkdir)/fakes

fakes = $(fakesdir)/fakesucgi

fakeflags = $(wrapperflags)

$(fakes): $(libs) $(hdrs) $(libutilsrcdir)/types.h $(fakesdir)/.sentinel

$(fakesdir)/.sentinel: $(checkdir)/.sentinel

$(fakesdir)/fakesucgi:
	$(CC) $(LDFLAGS) $(fakeflags) -o$@ $(srcdir)/main.c $(libs) $(LDLIBS)

# Scripted tests
checkscripts = $(checkdir)/BUG $(checkdir)/error $(checkdir)/main

$(checkdir)/BUG: $(checksrcdir)/BUG.sh $(wrappersdir)/BUG

$(checkdir)/error: $(checksrcdir)/error.sh $(wrappersdir)/error

$(checkdir)/main: $(checksrcdir)/main.sh $(checkutils)

$(checkscripts): $(fakesdir)/fakesucgi libutil.sh

$(checkscripts):
	cp $(srcdir)/$@.sh $@
	chmod a+x $@

# Execution
checks = $(unittests) $(checkscripts)

ifelse(__uname, `Darwin', `dnl
preload = DYLD_INSERT_LIBRARIES
ifcflag(`-fsanitize=address', `dnl

environ = MallocNanoZone=0
')dnl

', `dnl
preload = LD_PRELOAD

environ =
')dnl

RUNPARAFLAGS = -ci75 -j8

checks: $(checks)

ifnempty(`__sharedflag', `dnl
check: $(checks) $(RUNPARA) $(libmock)
', `dnl
check: $(checks) $(RUNPARA)
')dnl

check:
ifnempty(`__sharedflag', `dnl
	[ "$$(id -u)" -eq 0 ] \
&& $(environ) $(RUNPARA) $(RUNPARAFLAGS) $(checks) \
|| $(environ) $(RUNPARA) $(RUNPARAFLAGS) $(preload)=$(libmock) $(checks)
', `dnl
	$(environ) $(RUNPARA) $(RUNPARAFLAGS) $(checks)
')dnl


#
# Code analysis
#

srcs = $(srcdir)/*.h $(srcdir)/*.c $(checksrcdir)/*.c \
	$(libutilsrcdir)/*.h $(libutilsrcdir)/*.c \
	$(libmocksrcdir/*.h $(libmocksrcdir)/*.c

scripts = $(srcdir)/configure $(srcdir)/installc \
	$(utilsdir)/check* $(checksrcdir)/*.sh

CLANGTIDY = command -v clang-tidy >/dev/null 2>&1 && clang-tidy
CLANGTIDYflags = --quiet

CPPCHECK = command -v cppcheck >/dev/null 2>&1 && cppcheck
CPPCHECKFLAGS = --quiet --force --language=c --std=c99 \
	--project=cppcheck/sucgi.cppcheck --library=posix \
	--library=cppcheck/c99.cfg --library=cppcheck/gnuc.cfg \
	--library=cppcheck/posix.cfg --library=cppcheck/bsd.cfg \
	--library=cppcheck/linux.cfg --library=cppcheck/sucgi.cfg \
	--suppress-xml=cppcheck/suppress.xml --inline-suppr \
	--enable=all --addon=cppcheck/cert.py --addon=misra.py

cppcheckbuilddir = cppcheck/build

FLAWFINDER = command -v flawfinder >/dev/null 2>&1 && flawfinder
FLAWFINDERFLAGS = --falsepositive --dataonly --quiet

RATS = command -v rats >/dev/null 2>&1 && rats
RATSFLAGS = --resultsonly --quiet --warning 3

SHELLCHECK = command -v shellcheck >/dev/null 2>&1 && shellcheck
SHELLCHECKFLAGS = -x

analysis: compat.h $(cppcheckbuilddir)/.sentinel

analysis:
	$(CLANGTIDY) $(CLANGTIDYflags) $(srcs) -- -std=c99
	$(CPPCHECK) $(CPPCHECKFLAGS) $(srcs)
	$(FLAWFINDER) $(FLAWFINDERFLAGS) $(srcs)
	$(RATS) $(RATSFLAGS) $(srcs)

shellcheck:
	$(SHELLCHECK) $(SHELLCHECKFLAGS) $(scripts)


#
# Directory sentinels
#

# Sub-directories must be placed before their parent directories.
dirsentinels = $(libmockdir)/.sentinel $(libutildir)/.sentinel \
	$(fakesdir)/.sentinel $(checkutilsdir)/.sentinel \
	$(wrappersdir)/.sentinel $(checkdir)/.sentinel \
	$(utilsdir)/.sentinel $(cppcheckbuilddir)/.sentinel

$(dirsentinels):
	mkdir -p "$$(dirname $@)"
	touch $@


#
# Cleanup
#

binaries = sucgi $(utils) $(checkutils) $(unittests) $(wrappers) $(fakes) \
	$(checkscripts) libsucgi.a $(libutil) $(libmock) \
	$(objs) $(libutilobjs) $(libmockobjs)

maintainer-clean: distclean

distclean: mrproper

mrproper: clean

clean: mostlyclean

mostlyclean: tidy

maintainer-clean: distclean
	@printf '%s is intended for maintainers only.\n' "$@"
	@printf 'It deletes files that require special tools to rebuild.\n'
	rm -f sucgi.$(manext) docs/callgraph.*
	find . -type d -name 'chk-*' -exec rm '{}' +

distclean:
	rm -f compat.h config.status makefile

mrproper: clean
	find . '(' -name '*.gc*' -o -name '*.info' ')' -exec rm -f '{}' +

clean:
	find . -type d -name '$(package)-*' -exec rm -rf '{}' +
	rm -f $(distar) $(dirsentinels)
	myinode="$$(ls -i libutil.sh | cut -d' ' -f1)"; \
srcinode="$$(ls -i '$(srcdir)/libutil.sh' | cut -d' ' -f1)"; \
if [ "$$myinode" ] && [ "$$srcinode" ] && [ "$$myinode" -ne "$$srcinode" ]; \
then rm -f libutil.sh; \
fi
	rm -rf $(cppcheckbuilddir)
	for dir in $(dirsentinels:/.sentinel=); \
	do \
		if [ -e "$$dir" ] && [ -z "$$(ls -A "$$dir")" ]; \
		then rmdir "$$dir"; \
		fi; \
	done

mostlyclean:
	rm -f $(binaries)

tidy:
	find . '(' -name '*.bak' -o -name '*.expand' -o -name '*.log' ')' \
		-exec rm -f '{}' +
	find . -type d -name 'tmp-*' -exec rm -rf '{}' +


#
# Distribution
#

ifhascmd(`tar', `dnl
TAR = tar -c
UNTAR = tar -x
', `dnl
TAR = pax -w -xustar
UNTAR = pax -r -pamp
')dnl

ifhascmd(`gzip', `dnl
ZIP = gzip
UNZIP = gunzip
', `dnl
ZIP = compress
UNZIP = uncompress
')dnl

package = sucgi
version = syscmd(
	`awk "
		\$1 == \"#define\" && \$2 == \"VERSION\" {
			gsub(/[^0-9.]/, \"\", \$3);
			print(\$3);
			exit(0);
		}
	"' default(`__srcdir', `.')/main.c
)dnl

distname = $(package)-$(version)
distar = $(distname).tgz
dnl Add sucgi.8
distfiles = $(srcdir)/*.c $(srcdir)/*.h \
	$(srcdir)/compat.h.in $(srcdir)/makefile.in \
	$(srcdir)/macros.m4 $(srcdir)/config.h.tpl \
	$(srcdir)/README.md $(srcdir)/LICENSE.txt \
	$(srcdir)/configure $(srcdir)/installc $(srcdir)/libutil.sh \
	$(srcdir)/dist.excl $(srcdir)/conf \
	$(srcdir)/cppcheck $(srcdir)/docs \
	$(srcdir)/tests $(srcdir)/utils

dist: $(distar)

distcheck: dist

sigdist: dist $(distar).asc

sigdistcheck: sigdist distcheck

$(distar): $(distname)

$(distar).asc: $(distar)

$(distname): clean #sucgi.$(manext)

dist: $(distar)
	rm -rf $(distname)

distcheck:
	$(UNZIP) <$(distar) | $(UNTAR)
	cp -p config.h.tpl $(distname)/config.h
	cd $(distname) && ./configure && $(MAKE) -e all check dist
	rm -rf $(distname)

$(distname):
ifhascmd(`pathchk', `dnl
	find . "(" -name ".git*" -prune ")" -o -exec pathchk -Pp "{}" +
')dnl
	mkdir -m0700 $(distname)
	printf '%s\n' $(distfiles) | grep -Evfdist.excl | \
		xargs -E '' -I '{}' cp -r '{}' $(distname)
ifelse(default(`__uname'), `Darwin', `dnl
ifhascmd(`xattr', `dnl
	xattr -cr $(distname)
')dnl
')dnl

$(distar):
	$(TAR) $(distname) | $(ZIP) >$(distar)

$(distar).asc:
	gpg -qab --batch --yes $(distar)
