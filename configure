#!/bin/sh

#
# Generate a build configuration.
#
# Copyright 2022 and 2023 Odin Kroeger.
#
# This file is part of suCGI.
#
# suCGI is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# suCGI is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General
# Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with suCGI. If not, see <https://www.gnu.org/licenses/>.
#

# shellcheck disable=2015

#
# Initialiation
#

set -Cefu
scriptdir="$(cd -P "$(dirname -- "$0")" && pwd)"
: "${scriptdir:?}"
readonly scriptdir
# shellcheck disable=1091
. "$scriptdir/scripts/libutil.sh"	|| exit
init					|| exit


#
# Defaults
#

# Compiler flags to test for. Space-separated list.
cflags=

# Compilers to look for. Space-separated list of commands.
compilers='gcc clang tcc icx icc c99 cc'

# Configuration file.
conf="conf/prod.env"

# Files to generate. Space-separated list.
files='compat.h makefile'

# Overwrite existing files?
force=

# Headers to look for. Space-separated list of filenames.
headers='sys/param.h features.h' #security/pam_appl.h shadow.h'

# Libraries to look for. Space-separated list of library names.
#libs=pam

# Be quiet?
quiet=


#
# Constants
#

# Variables to set as M4 Macros. Whitespace-separated list.
readonly macros='
	CC CFLAGS AR ARFLAGS LDFLAGS LDLIBS DESTDIR PREFIX
	prefix srcdir cgidir exec_prefix libexecdir datarootdir
	mandir man8dir manext
	grouptype ngroupstype maxuidval maxgidval maxgroupval maxngroupsval
	have_sys_param_h have_features_h picflags pieflags sharedflag uname
'

# Files by which to identify the source directory. Whitespace-separated list.
readonly srcfiles='
	main.c
	makefile.in
	compat.h.in
	conf/prod.env
	conf/devel.env
'

# Flags for testing compiler features. Space-separated list of flags.
readonly feattestflags='-std=c99 -pipe'

# Flags for testing conversions. Space-separated list of flags.
readonly wconvflags='-Wconversion'

# Where to save the configuration.
if [ -e config.noauto ]
then confsave=config.noauto
else confsave=config.status
fi
readonly confsave

# Integer types that may be used for IDs and sizes. Colon-separated list.
integertypes=''
for integerbase in 'int' 'long' 'long long'
do
	for integerprefix in '' 'unsigned '
	do integertypes="$integertypes:$integerprefix$integerbase"
	done
done
integertypes="$integertypes:intmax_t:uintmax_t"
unset integerbasen integerprefix
readonly integertypes

# Possible data types for group IDs. Colon-separated list.
readonly grouptypes="gid_t:$integertypes"

# Possible data types for sizes. Colon-separated list.
readonly sizetypes="size_t:$integertypes"

# Probe source directory.
readonly probesdir="$scriptdir/probes"


#
# Functions
#

# Check if the given compiler supports the given flags.
addflags() {
	__addflags_ncomps=0 __addflags_comps=
	for __addflags_arg
	do
		case $__addflags_arg in (-*)
			break
		esac

		__addflags_ncomps=$((__addflags_ncomps + 1))
		__addflags_comps="$__addflags_comps $__addflags_arg"
	done

	if [ "$__addflags_ncomps" -gt 0 ]
	then
		shift "$__addflags_ncomps"
		for __addflags_comp in $__addflags_comps
		do
			__addflags_var="cflags_${__addflags_comp}"
			eval "$__addflags_var=\"\${$__addflags_var-} \$*\""
		done
	else
		cflags="${cflags-} $*"
	fi

	unset __addflags_arg __addflags_ncomps __addflags_comps \
	      __addflags_comp __addflags_var
}

# Get a function prototype.
getprototype() {
	"$CC" -E -DHDR="<$1>" "$probesdir/header.h" 2>/dev/null |
	awk -vRS=';' -vfn="${2:?}" '
		$0 !~ /^ *#/ && $0 ~  "[^ ] *" fn " *[\\($]" {
			gsub("[\n\r\t\v ]+", " ");
			print;
		}
	'
}

# Get the type of a function parameter.
getparamtype() {
	getprototype "${1:?}" "${2:?}" |
	awk -vn="${3:?}" '
		match($0, "\\([^)]*") {
			paramstr = substr($0, RSTART + 1, RLENGTH - 1);
			split(paramstr, params, " *, *");
			print(params[n]);
		}
	'
}

# Test compilation.
testcc() (
	: "${testcc_cc:?}" "${testcc_cflags?}"

	exec >/dev/null 2>&1

	case $testcc_cc in
	(clang|gcc)
		# shellcheck disable=2086
		"$CC" -xc -Werror $testcc_cflags -o/dev/null "$@"
		;;
	(tcc)
		# TinyCC unlinks /dev/null when given -o/dev/null.
		# https://savannah.nongnu.org/bugs/index.php?64476
		# shellcheck disable=2086
		"$CC" -Wunsupported \
		      -xc -Werror $testcc_cflags -o"$TMPDIR/a.out" "$@"
		;;
	(icc)
		# shellcheck disable=2086
		"$CC" -diag-enable=10006,10148 -diag-error=10006,10148 \
		      -xc -Werror $testcc_cflags -o/dev/null "$@"
		;;
	(*)
		return 1
		;;
	esac
)

# Test compiler flags.
testflags() {
	testcc "$@" "$probesdir/noop.c"
}


#
# Options
#

for macro in $macros
do
	case $macro in (*[a-z]*)
		unset "$macro"
	esac
done

nfiles=0
while [ "$#" -gt 0 ]
do
	opt="$1" optopt='' suffix=''
	case $1 in
	(--)	shift
		break
		;;
	(--*)	case $1 in
		(*=*)	optopt="${1%%=*}" suffix="${1#*=}" ;;
		(*)	optopt="$1"       suffix= ;;
		esac
		shift
		;;
	(-*)	suffix="${1#-?}"
		optopt="${1%$suffix}"
		shift
		;;
	(*)	break
	esac

	optarg=''
	case $optopt in
	(--enable-*)
		[ "$suffix" ] || shift
		;;
	(-h|--debug|--dev|--force|--help|--quiet|--with-*)
		[ "$suffix" ] && err -s64 '%s: takes no argument.' "$optopt"
		;;
	(*)
		if [ "$suffix" ]
		then
			optarg="$suffix"
		else
			optarg="${1-}"
			shift
		fi
		[ "$optarg" ] || err -s64 '%s: no argument given.' "$optopt"
		;;
	esac
	unset suffix

	case $optopt in
	(-h|--help)	exec cat <<EOF >&2
$progname - generate a build configuration

Usage:  $progname [-D|-U MACRO ...] [--conf=FILE|--dev]
                  [--gen=FILE ...] [--force] [--quiet]
                  [<GNU options> ...] [CFLAGS ...] [VAR=VALUE]
        $progname -h|--help

Operands:
    VAR          Configuration variable.
    VALUE        Value for that variable. Use the empty string to disable.

Options:
    -D MACRO     Add "-DMACRO" to \$CFLAGS.
    -U MACRO     Add "-UMACRO" to \$CFLAGS.
    --gen FILE   Only generate FILE (default: $files).
    --conf FILE  Read build configuration from FILE (default: $conf).
    --dev        Short for "--conf=conf/devel.env".
    --force      Overwrite existing files.
    --quiet      Be quiet.
    -h, --help   Show this help screen.

$progname aims to conform to the GNU Coding Standard (chap. 7), but
does not support cross-compiling (i.e., --build, --host, and --target).

All unrecognised options are passed on to the C compiler,
but only if the compiler supports them.

See docs/build.md for details.

Copyright 2022 and 2023 Odin Kroeger.
Released under the GNU Affero General Public License.
This programme comes with ABSOLUTELY NO WARRANTY.
EOF
			;;
	(--build|--host|--target|--enable-*|--with-*)
			warn '%s: not supported.' "$optopt" ;;
	(--gen)		eval "file_$nfiles"='"$optarg"'
			nfiles=$((nfiles + 1))
			;;
	(--debug)	set -x ;;
	(--conf)	conf="$optarg" ;;
	(--dev)		conf="$scriptdir/conf/devel.env" ;;
	(--prefix)	prefix="$optarg" ;;
	(--exec-prefix)	exec_prefix="$optarg" ;;
	(--libexecdir)	libexecdir="$optarg" ;;
	(--datarootdir)	datarootdir="$optarg" ;;
	(--mandir)	mandir="$optarg" ;;
	(--man8dir)	man8dir="$optarg" ;;
	(--manext)	manext="$optarg" ;;
	(--cgidir)	cgidir="$optarg" ;;
	(--wwwgrp)	wwwgrp="$optarg" ;;
	(--force)	force=y ;;
	(--quiet)	quiet=y ;;
	(-D)		addflags "-D$optarg" ;;
	(-U)		addflags "-U$optarg" ;;
	(-*)		addflags "$opt" ;;
	(*)		break
	esac
done
unset opt optopt optarg

while [ "$#" -gt 0 ]
do
	case $1 in
	(*=*)	: ;;
	(*)	break
	esac

	key="${1%%=*}" value="${1#*=}"
	if inlist '=' "$key" $macros
	then eval "$key"='"$value"'
	else warn '%s: not a supported variable.' "$key"
	fi

	shift
done

[ $# -gt 0 ] && warn 'ignoring operands: %s' "$*"

conffile=
case $conf in
	([./]*) conffile="$conf" ;;
	(*)	for dir in . .. "$scriptdir" ./conf ../conf "$scriptdir/conf"
		do
			for suffix in '' '.env'
			do
				fname="$dir/$conf$suffix"
				if [ -e "$fname" ]
				then
					conffile="$fname"
					break 2
				fi
			done
		done
esac
unset dir file suffix

[ "$conffile" ] || err '%s: no such configuration.' "$conf"

# shellcheck source=conf/devel.env
. "$conffile" || exit
unset conf conffile

for fname in		\
	${DESTDIR-}	\
	${PREFIX-}	\
	${prefix-}	\
	${srcdir-}	\
	${cgidir-}	\
	${exec_prefix-}	\
	${libexecdir-}	\
	${datarootdir-}	\
	${mandir-}	\
	${man8dir-}	\
	${manext-}
do
	case $fname in (*[!./A-Za-z0-9_-]*)
		err -s64 '%s: bad characters.' "$fname"
	esac
done

if [ "$nfiles" -eq 0 ]
then
	for file in $files
	do
		eval "file_$nfiles"='"$file"'
		nfiles=$((nfiles + 1))
	done
fi
unset files

if ! [ "$force" ]
then
	[ -e "$confsave" ] &&
	err '%s: exists, use --force to overwrite.' "$confsave"

	i=0
	while [ "$i" -lt "$nfiles" ]
	do
		eval file=\"\${file_$i}\"
		i=$((i + 1))
		if [ -e "$file" ]
		then err '%s: exists, use --force to overwrite.' "$file"
		fi
	done
	unset i file
fi

[ "$quiet" ] && exec >/dev/null

# shellcheck disable=2034
readonly force quiet nfiles


#
# Temporary directory.
#

tmpdir tmp . || exit


#
# Source directory
#

if [ "${srcdir-x}" = x ] && [ "${srcdir-}" != x ]
then
	# The GNU Coding Standard says . and .. need to be checked.
	for dir in . .. "$scriptdir"
	do
		for file in $srcfiles
		do
			if ! [ -e "$dir/$file" ]
			then
				continue 2
			fi
		done

		srcdir="$dir"
		break
	done
fi

[ "$srcdir" ] || err 'cannot locate source directory.'


#
# System
#

printf 'System: '

: "${uname:="$(uname)"}"

printf '%s\n' "$uname"


#
# Compiler
#

printf 'C compiler: '

: "${CC:=}"
if ! [ "$CC" ]
then
	for cc in $compilers
	do
		if	command -v "$cc" >/dev/null 2>&1 &&
			"$cc" -v 2>&1 | grep -q "$cc"
		then
			CC="$cc"
			break
		fi
	done

	if ! [ "$CC" ]
	then
		for cc in c99 cc
		do
			if command -v "$cc" >/dev/null 2>&1
			then
				CC="$cc"
				break
			fi
		done
	fi

	unset cc
fi

if ! [ "$CC" ]
then
	printf 'none found\a\n'
	exit 2
fi

# Absolute path.
ccpath="${CC:?}"
readonly ccpath

# Compiler executable.
ccexec="$(basename "${ccpath:?}")"
readonly ccexec

# Compiler name.
case $ccexec in
(musl-*) ccname="${ccexec##musl-}"
esac
ccname="${ccexec%%[!a-z]*}"
readonly ccname

# Compiler command prefix.
case $ccname in
(clang)	ccpre=llvm ;;
(*)	ccpre="$ccname" ;;
esac
readonly ccpre

# Compiler flags useful for testing compiler features.
testcc_cc="$ccname"
testcc_cflags=
# shellcheck disable=2086
for flag in $feattestflags
do testflags $flag && testcc_cflags="$testcc_cflags $flag"
done
unset flag
readonly testcc_cc testcc_cflags

# Check if the compiler detects conversions that may alter values.
if testflags $wconvflags
then ccwconv=y
else ccwconv=
fi

# Output.
printf '%s\n' "$CC"


#
# Common compiler flags
#

printf 'Compiler flags:'

if [ "${CFLAGS-x}" = x ] && ! [ "${CFLAGS-}" = x ]
then
	if [ "$ccname" = c99 ]
	then
		CFLAGS="-O1 -s"
		printf ' %s\n' "$CFLAGS"
	else
		eval specflags="\${cflags_$ccname-}"

		CFLAGS=
		# shellcheck disable=2086,2154
		for flag in $cflags $specflags
		do
			case $flag in (-D*|-U*)
				CFLAGS="$CFLAGS $flag"
				continue
			esac

			# shellcheck disable=2086
			if testflags $CFLAGS "$flag"
			then
				CFLAGS="$CFLAGS $flag"
				printf -- ' %s' "$flag"
			fi
		done

		[ "${CFLAGS-}" ] || printf ' none detected'

		echo
		unset specflags
	fi
else
	printf -- ' %s\a\n' "${CFLAGS:-none given}"
fi
unset cflags


#
# Position-independent code
#

printf 'Position-independent code: '

if [ "${picflags-x}" = x ] && [ "${picflags-}" != x ]
then
	for flag in -fPIC -fpic
	do
		# shellcheck disable=2086
		if testflags $CFLAGS $flag
		then
			picflags="$flag"
			break 2
		fi
	done
fi
: "${picflags:=}"

printf '%s\n' "${picflags:-unsupported}"


#
# Position-independent executables
#

if [ "$picflags" ]
then
	printf 'Position-independent executables: '

	if [ "${pieflags-x}" = x ] && [ "${pieflags-}" != x ]
	then
		for flag in -fPIE -fpie
		do
			# shellcheck disable=2086
			if testflags $CFLAGS -pie $flag
			then
				pieflags="-pie $flag"
				break 2
			fi
		done
	fi

	printf '%s\n' "${pieflags:-unsupported}"
fi
: "${pieflags:=}"


#
# Shared objects
#

if [ "$picflags" ]
then
	printf 'Shared objects: '

	if [ "${sharedflag-x}" = x ] && [ "${sharedflag-}" != x ]
	then
		sharedflag=
		case $uname in
		(Darwin) sharedflags='-dynamiclib -shared' ;;
		(*)      sharedflags=-shared ;;
		esac

		# shellcheck disable=2086
		for flag in $sharedflags
		do
			if testflags "$picflags" "$flag"
			then
				sharedflag="$flag"
				break
			fi
		done
	fi

	printf '%s\n' "${sharedflag:-unsupported}"
fi
: "${sharedflags-=}"


#
# Archiver
#

printf 'Archiver: '

if [ "${AR-x}" = x ] && ! [ "${AR-}" = x ]
then
	ccvers="$(
		"$CC" -v 2>&1 |
		awk '{
			for (i = 1; i <= NF; i++) {
				if ($i ~ /^v?[0-9]+\.[0-9.]+$/) {
					gsub("[^0-9\.]", "", $i);
					print $i;
					exit;
				}
			}
		}' 2>/dev/null
	)"

	if [ "$ccvers" ]
	then
		ccmajor="${ccvers%%.*}"
	else
		case $ccexec in
		(*[0-9]*) ccmajor="${ccexec#"${ccexec%%[0-9]*}"}" ;;
		(*)       ccmajor= ;;
		esac
	fi
	readonly ccvers ccmajor

	if [ "${ccmajor-}" ]
	then archivers="$ccpre-ar-$ccmajor $ccpre-ar$ccmajor $ccpre-ar"
	else archivers="$ccpre-ar"
	fi

	for archiver in $archivers
	do
		unset IFS
		if command -v "$archiver" >/dev/null 2>&1
		then
			AR="$archiver"
			break
		fi
	done
fi

printf '%s\n' "${AR-default}"


#
# Headers
#

printf 'Headers:'

nheaders=0
for header in $headers
do
	headervar="have_$(printf '%s\n' "$header" | sed 's/[^a-z]/_/g')"

	if [ "$headervar" = have_ ]
	then
		'%s: could not derive header name.' "$header"
		continue
	fi

	eval headeravail="\${$headervar-}"

	# shellcheck disable=2154
	case $headeravail in
	(0)
		:
		;;
	(1)
		nheaders=$((nheaders + 1))
		printf ' %s' "$header"
		;;
	(*)
		if	"$CC" -D"HDR=<$header>" -E "$probesdir/header.h" \
			>/dev/null 2>&1
		then
			eval "$headervar=1"
			nheaders=$((nheaders + 1))
			printf -- ' %s' "$header"
		else
			eval "$headervar=0"
		fi
	esac

	unset headeravail headervar
done

case $nheaders in
(0) printf ' none found\n' ;;
(*) printf '\n' ;;
esac
unset nheaders


# #
# # Check which libraries are available
# #
#
# printf 'Libraries:'
#
#
# # shellcheck disable=2086,2154
# set -- $libs
# nlibs=0 njobs=0 jobs=''
# while [ "$njobs" -gt 0 ] || [ $# -gt 0 ]
# do
# 	# Start jobs.
# 	while [ "$njobs" -lt "$maxnjobs" ] && [ $# -gt 0 ]
# 	do
# 		lib="$1"
# 		shift
#
# 		libvar="SUCGI_HAVE_LIB$(
# 			printf '%s\n' "$lib"	|
# 			sed 's/[^a-z]/_/g'	|
# 			tr '[:lower:]' '[:upper:]'
# 		)"
#
# 		case $libvar in (SUCGI_HAVE_LIB_|*[!A-Z0-9_]*)
# 			warn '%s: could not derive macro name.'
# 			continue
# 		esac
#
# 		eval libavail="\${$libvar-}"
#
# 		# shellcheck disable=2154
# 		case $libavail in
# 		(0)
# 			eval "$libvar=0"
# 			;;
# 		(1)
# 			eval "$libvar=1"
# 			nlibs=$((nlibs + 1))
# 			printf ' %s' "$lib"
# 			;;
# 		(*)
# 			src="$TMPDIR/lib.c"
# 			printf 'int main(void) {return 0;}\n' >"$src"
#
# 			"$CC" -o"${src%.c}.out" "$src" -l"$lib" 2>/dev/null &
# 			njobs=$((njobs + 1)) jobs="$jobs$! "
# 			eval "lib_$!"='$lib'
# 			eval "libvar_$!"='$libvar'
# 		esac
#
# 		unset lib libvar libavail
# 	done
#
# 	# Collect the job on top of the pile.
# 	if [ "$njobs" -gt 0 ]
# 	then
# 		job="${jobs%% *}"
# 		eval lib="\"\${lib_$job-}\""
# 		eval libvar="\"\${libvar_$job-}\""
# 		unset "lib_$job" "libvar_$job"
#
# 		if wait "$job"
# 		then
# 			eval "$libvar=1"
# 			LDLIBS="${LDLIBS-} -l$lib" nlibs=$((nlibs + 1))
# 			printf -- ' %s' "$lib"
# 		else
# 			eval "$libvar=0"
# 		fi
#
# 		njobs=$((njobs - 1)) jobs="${jobs#* }"
# 		unset lib libvar job
# 	fi
# done
#
# case $nlibs in
# (0) printf ' none found\n' ;;
# (*) printf '\n' ;;
# esac
#
#
# #
# # How to validate accounts
# #
#
# printf 'Account validation: '
#
# if	[ "${SUCGI_HAVE_SECURITY_PAM_APPL_H-0}" -ne 0 ] &&
# 	[ "${SUCGI_HAVE_LIBPAM-0}" -ne 0 ]
# then
# 	printf 'PAM\n'
# elif	[ "${SUCGI_HAVE_SHADOW-0}" -ne 0 ]
# then
# 	printf 'shadow\n'
# else
# 	if ! [ "${SUCGI_HAVE_EXPIRE-}" ]
# 	then
# 		src="$TMPDIR/pw_expire.c"
# 		cat <<-'EOF' >"$src"
# 			#define _BSD_SOURCE
# 			#define _DARWIN_C_SOURCE
# 			#define _DEFAULT_SOURCE
# 			#define _GNU_SOURCE
#
# 			#include <sys/types.h>
# 			#include <pwd.h>
#
# 			struct passwd pwd = {.pw_expire = 0};
# 		EOF
#
# 		if "$CC" -c -o"$TMPDIR/pw_expire.o" "$src" >/dev/null 2>&1
# 		then SUCGI_HAVE_EXPIRE=1
# 		else SUCGI_HAVE_EXPIRE=0
# 		fi
# 	fi
#
# 	case ${SUCGI_HAVE_EXPIRE-0} in
# 	(0) printf 'not supported\n' ;;
# 	(*) printf 'passwd\n' ;;
# 	esac
# fi


#
# getgrouplist GID data type.
#

printf 'getgrouplist GID type: '

: "${grouptype=}"
# shellcheck disable=2086
if	! [ "$grouptype" ] &&
	[ "$ccwconv" ] &&
	testflags -Wincompatible-pointer-types
then
	IFS=:
	for candidate in $grouptypes
	do
		unset IFS
		[ "$candidate" ] || continue

		# shellcheck disable=2086
		if	testcc $wconvflags -Wincompatible-pointer-types \
			       -DGRP_T="$candidate" "$probesdir/grouptype.c"
		then
			grouptype="$candidate"
			break
		fi
	done
	unset candidate
fi
: "${grouptype:="$(getparamtype unistd.h getgrouplist 3 | sed 's/ *\*//')"}"

# shellcheck disable=2034
case $grouptype in
("short")              maxgroupval=SHRT_MAX ;;
("unsigned short")     maxgroupval=USHRT_MAX ;;
("int")                maxgroupval=INT_MAX ;;
("unsigned int")       maxgroupval=UINT_MAX ;;
("long")               maxgroupval=LONG_MAX ;;
("unsigned long")      maxgroupval=ULONG_MAX ;;
("long long")          maxgroupval=LLONG_MAX ;;
("unsigned long long") maxgroupval=ULLONG_MAX ;;
("intmax_t")           maxgroupval=INTMAX_MAX ;;
("uintmax_t")          maxgroupval=UINTMAX_MAX ;;
("gid_t")              maxgroupval=MAX_GID_VAL
esac

printf '%s\n' "${grouptype:-guess at compile-time}"


#
# setgroups number of groups data type
#

printf 'setgroups count type: '

: "${ngroupstype=}"
# shellcheck disable=2086
if ! [ "$ngroupstype" ] && [ "$ccwconv" ]
then
	IFS=:
	for candidate in $sizetypes
	do
		unset IFS
		[ "$candidate" ] || continue

		# shellcheck disable=2086
		if 	testcc $wconvflags -DNGRPS_T="$candidate" \
			       "$probesdir/ngroupstype.c"
		then
			ngroupstype="$candidate"
			break
		fi
	done
	unset candidate
fi
: "${ngroupstype:="$(getparamtype unistd.h setgroups 1 | sed 's/ *\*//')"}"

# shellcheck disable=2034
case $ngroupstype in
("short")              maxngroupsval=SHRT_MAX ;;
("unsigned short")     maxngroupsval=USHRT_MAX ;;
("int")                maxngroupsval=INT_MAX ;;
("unsigned int")       maxngroupsval=UINT_MAX ;;
("long")               maxngroupsval=LONG_MAX ;;
("unsigned long")      maxngroupsval=ULONG_MAX ;;
("long long")          maxngroupsval=LLONG_MAX ;;
("unsigned long long") maxngroupsval=ULLONG_MAX ;;
("intmax_t")           maxngroupsval=INTMAX_MAX ;;
("uintmax_t")          maxngroupsval=UINTMAX_MAX ;;
esac

printf '%s\n' "${ngroupstype:-guess at compile-time}"


#
# Maximum values representable as uid_t and gid_t.
#

for idtype in uid_t gid_t
do
	printf '%s maximum: ' "$idtype"

	case $idtype in
	(uid_t) idmaxvar=maxuidval ;;
	(gid_t) idmaxvar=maxgidval ;;
	(*)     err -s70 'line %d: %s: unknown type.' ${LINENO-?} "$idtype"
	esac

	if eval "! [ \"\${$idmaxvar-}\" ]"
	then
		maxvalbin="$TMPDIR/${idtype}max"

		"$CC" -o"$maxvalbin" -D"T=$idtype" "$probesdir/typemax_rt.c" \
		      >/dev/null 2>&1		&&
		idmaxval="$("$maxvalbin" | tail -n1)"	&&
		eval "$idmaxvar=\"\$idmaxval\""

		unset maxvalbin idmaxval
	fi

	# The working directory could be mounted noexec.
	if eval "! [ \"\${$idmaxvar-}\" ]" && [ "$ccwconv" ]
	then
		for idmax in		\
			SHRT_MAX	\
			USHRT_MAX	\
			INT_MAX		\
			UINT_MAX	\
			LONG_MAX	\
			ULONG_MAX	\
			LLONG_MAX	\
			ULLONG_MAX
		do
			# shellcheck disable=2086
			testcc $wconvflags -D"T=$idtype" -D"V=$idmax" \
			       "$probesdir/typemax_ct.c" || break
			eval "$idmaxvar=\"\$idmax\""
		done
		unset idmax
	fi

	eval "printf '%s\n' \"\${$idmaxvar-\"guess at compile-time\"}\""

	unset idvar
done
unset idtype


#
# M4 command line
#

shift "$#"
for key in $macros
do
	eval "value=\"\${$key-}\""
	[ "$value" ] && set -- "$@" "-D__$key=\`${value# }'"
done
unset key value


#
# Save configuration
#

if [ -e "$confsave" ]
	then exists=x
	else exists=
fi

if [ "$progname" != "$confsave" ]
then
	if [ "$exists" ] && ! [ "$force" ]
	then
		err '%s exists, use --force to overwrite.' "$confsave"
	else
		swap="$TMPDIR/$confsave"

		cat <<-EOF >"$swap"
		#!/bin/sh
		# Last configuration detected by $srcdir/configure.

		'$srcdir/configure' --force --quiet "\$@" \\
		EOF

		for key in $macros
		do
			eval "value=\"\${$key--}\""
			! [ "$value" = - ] &&
			printf "\t'%s=%s' \\\\\n" "$key" "$value" >>"$swap"
		done
		unset key value

		chmod +x "$swap"

		if [ "$exists" ]
		then
			if cmp "$swap" "$confsave" >/dev/null 2>&1
			then
				warn -q 'no changes to %s.' "$confsave"
			else
				warn 'updating %s ...' "$confsave"
				mv -f "$swap" "$confsave"
			fi
		else
			warn 'storing configuration in %s ...' "$confsave"
			mv -f "$swap" "$confsave"
		fi
	fi
fi


#
# Create files
#

i=0
while [ "$i" -lt "$nfiles" ]
do
	eval file="\${file_$i:?}"
	i=$((i + 1))

	template="$srcdir/$file.in"
	exists=
	# shellcheck disable=2154
	if [ -e "$file" ]
	then
		if ! [ "$force" ]
		then
			warn '%s exists, use --force to overwrite.' "$file"
			continue
		fi
		exists=x
	fi

	swap="$TMPDIR/$file"
	if m4 "$@" "$template" >"$swap"
	then
		if [ "$exists" ]
		then
			if cmp "$swap" "$file" >/dev/null 2>&1
			then
				warn 'no changes to %s.' "$file"
				continue
			else
				warn 'updating %s ...' "$file"
			fi
		else
			warn 'creating %s ...' "$file"
		fi

		mv -f "$swap" "$file"
	else
		rm -f "$swap" || :
		err 'could not generate %s.' "$file"
	fi
	unset swap
done
