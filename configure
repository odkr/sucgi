#!/bin/sh
# shellcheck disable=1091,2015

#
# Initialisation
#

set -Ceu

src_dir="$(dirname "$0")" || {
	printf '%s\n' "dirname $0: exited with status $?." >&2
	exit 1
}
readonly src_dir
cd "$src_dir" || exit
. ./tools/lib.sh || exit
init
tmpdir tmp .


#
# Constants
#

# Number of child processes to spawn.
readonly nchildren=4


#
# Functions
#

# Add flags to cflags.
add_cflags() {
	cflags="${cflags-} $*"
}

# Add macro definitions to cflags.
add_macros() {
	while [ $# -gt 0 ]
	do
		cflags="${cflags-} -D$1"
		shift
	done
}


#
# Options
#

OPTIND=1 OPTARG='' opt=''
force='' quiet='' conf=prod.env
while getopts c:dfqh opt; do
	case $opt in
		(c) conf="$OPTARG" ;;
		(d) conf=devel.env ;;
		(f) force=x ;;
		(q) quiet=x ;;
		(h) exec cat <<EOF >&2 ;;
configure - generate build configuration.

Usage:       configure [-c FILE|-d] [-f] [-q]
             configure -h

Options:
    -c FILE  Read build configuration from FILE (default: $conf).
    -d       Short for -c devel.env.
    -f       Overwrite existing files.
    -h       Show this help screen.
    -q       Be quiet.

Environment:
    CC       The C compiler.
    CFLAGS   Flags to pass to the C compiler.

See README.rst and docs/BUILDING.rst for details.

Copyright 2022 Odin Kroeger.
Released under the GNU General Public License.
This programme comes with ABSOLUTELY NO WARRANTY.
EOF
		(*) exit 1
	esac
done
shift $((OPTIND - 1))
unset opt

[ "$#" -gt 0 ] && err 'too many operands.'
[ "$conf" ]    || err "$bld-c$rst$red: no filename given."
[ -e "$conf" ] || err "$bld$conf$rst$red: no such file." 

# shellcheck disable=1090
. "$conf" || exit


#
# Check if gcc, clang, or tcc are available.
#

printf 'C compiler: '

: "${CC:=}"
if ! [ "$CC" ]
then
	for cc in gcc clang tcc
	do
		if
			command -v "$cc" >/dev/null &&
			"$cc" -v 2>&1 | grep -q "$cc"
		then
			CC="$cc"
			break
		fi
	done

	if ! [ "$CC" ]
	then
		for cc in c99 cc
		do
			if command -v "$cc" >/dev/null
			then
				CC="$cc"
				break
			fi
		done
	fi

	unset cc
fi

if [ "$CC" ]
then
	printf '%s\n' "$CC"
else
	printf 'none found!\a\n'
fi


#
# Check which flags the C compiler supports.
#

: "${CFLAGS="${cflags-}"}"
if [ "$CC" ]
then
	printf 'Compiler flags:'

	# shellcheck disable=2086
	set -- $CFLAGS
	CFLAGS='' n=0 pids=''
	while [ $# -gt 0 ]
	do
		case $1 in (-D*)
			CFLAGS="$CFLAGS $1"
			shift
			continue
		esac

		"$CC" -xc -Werror "$1" -o/dev/null - <<-EOF >/dev/null 2>&1 &
			int main (void) { return 0; }
		EOF
		pids="$pids $!"
		eval "flag_$!"='$1'
		shift

		if [ $(($# % nchildren)) -eq 0 ]
		then
			for pid in $pids
			do
				if wait "$pid"
				then
					eval flag="\"\$flag_$pid\""
					unset "flag_$pid"
					[ "${flag-}" ] || continue;
					CFLAGS="$CFLAGS $flag"
					n=$((n + 1))
					printf ' %s' "$flag"
				fi
			done
			pids=
		fi
	done

	if [ "$n" -eq 0 ]
	then
		printf ' none supported.\a\n'
	else
		echo
	fi

	unset cflags flag n pid
fi


#
# Create files
#

errc=0 filec=0 genc=0
for input in *.m4
do
	[ "$input" = "*.m4" ] && break
	name="$(basename "$input")" || 
		err "basename $input: exited with status $?."
	output="${name%.m4}"
	filec=$((filec + 1))

	# shellcheck disable=2154
	if [ -e "$output" ]
	then
		if [ "$force" ]
		then
			warn -qy "overwriting ${bld-}$output${rst_y-}."
		else
			warn -y "${bld-}$output${rst_y-} exists;${rst-}" \
			        "give ${bld-}-f${rst-} to overwrite."
			continue
		fi
	fi

	swap="$TMPDIR/$output"
	if m4	-D__CC__="${CC-}"		\
		-D__CFLAGS__="${CFLAGS# }"	\
		-D__cov_cc__="${cov_cc-}"	\
		"$input" >"$swap"
	then
		mv "$swap" "$output"
		genc=$((genc + 1))
		warn -q "generated ${bld-}$output${rst-}."
	else
		rm -f "$swap" || :
		errc=$((errc + 1))
		warn -r "failed to generate${bld-}$output${rst_r-}."
	fi
	unset swap
done

# shellcheck disable=2154
if ! [ "$quiet" ]
then
	if [ $errc -gt 0 ]
	then
		warn -r "${bld-}$errc${rst_r-} of ${bld-}$filec${rst_r-}" \
		        "file(s) could not be generated."
	elif [ $genc -lt $filec ]
	then
		warn -y "${bld-}$genc${rst_y-} of ${bld-}$filec${rst_y-}" \
		        "file(s) generated."
	else
		warn -g "${bld-}$genc${rst_g-} of ${bld-}$filec${rst_g-}" \
		        "file(s) generated."
	fi
fi

exit $errc
