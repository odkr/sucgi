#!/bin/sh
# shellcheck disable=1091,2015

#
# Initialisation
#

set -Ceu

src_dir="$(dirname "$0")" || {
	printf '%s\n' "dirname $0: exited with status $?." >&2
	exit 1
}
readonly src_dir
cd "$src_dir" || exit
. ./tools/lib.sh || exit
init
tmpdir tmp .


#
# Constants
#

# Number of child processes to spawn.
readonly nchildren=4

# Supported Makefile variables
readonly makevars='CC CFLAGS ARFLAGS LDFLAGS LDLIBS cov_cc cgi_dir www_grp'


#
# Functions
#

# Add flags to cflags.
add_cflags() {
	cflags="${cflags-} $*"
}

# Add macro definitions to cflags.
add_macros() {
	while [ $# -gt 0 ]
	do
		cflags="${cflags-} -D$1"
		shift
	done
}


#
# Options
#

OPTIND=1 OPTARG='' opt=''
args="$*" conf=prod.env force='' status=x quiet=''
while getopts Cc:dfqh opt; do
	case $opt in
		(C) status= ;;
		(c) conf="$OPTARG" ;;
		(d) conf=devel.env ;;
		(f) force=x ;;
		(q) quiet=x ;;
		(h) exec cat <<EOF >&2 ;;
configure - generate build configuration

Usage:       configure [-C] [-c FILE|-d] [-f] [-q]
             configure -h

Options:
    -C         Do not update config.status.
    -c FILE    Read build configuration from FILE (default: $conf).
    -d         Short for -c devel.env.
    -f         Overwrite existing files.
    -h         Show this help screen.
    -q         Be quiet.

Environment:
    CC         The C compiler.
    CFLAGS     Flags to give to the C compiler.
    ARFLAGS    Flags to give to the archiver.
    LDFLAGS    Flags to give to the linker.
    LDLIBS     Flags or names to give to the linker. 

See README.rst and docs/BUILDING.rst for details.

Copyright 2022 Odin Kroeger.
Released under the GNU General Public License.
This programme comes with ABSOLUTELY NO WARRANTY.
EOF
		(*) exit 1
	esac
done
shift $((OPTIND - 1))
unset opt

if [ $# -gt 0 ]
then
	printf 'usage: configure [-C] [-c FILE|-d] [-f] [-q]\n' >&2
	exit 2
fi

[ "$conf" ]    || err "${bld-}-c${rst_r-}: no filename given."
[ -e "$conf" ] || err "${bld-}$conf${rst_r-}: no such file." 

# shellcheck disable=1090
. "$conf" || exit


#
# Check if gcc, clang, or tcc are available.
#

printf 'C compiler: '

: "${CC:=}"
if ! [ "$CC" ]
then
	for cc in gcc clang tcc
	do
		if
			command -v "$cc" >/dev/null &&
			"$cc" -v 2>&1 | grep -q "$cc"
		then
			CC="$cc"
			break
		fi
	done

	if ! [ "$CC" ]
	then
		for cc in c99 cc
		do
			if command -v "$cc" >/dev/null
			then
				CC="$cc"
				break
			fi
		done
	fi

	unset cc
fi

if [ "$CC" ]
then
	printf '%s\n' "$CC"
else
	printf 'none found!\a\n'
fi


#
# Check which flags the C compiler supports.
#

if [ "$CC" ]
then
	printf 'Compiler flags:'

	if [ "${CFLAGS-}" ]
	then
		printf ' %s' "$CFLAGS"
	fi

	# shellcheck disable=2086
	set -- $cflags
	pids=''
	while [ $# -gt 0 ]
	do
		flag="$1"
		shift

		for given in ${CFLAGS-}
		do
			[ "$flag" = "$given" ] && continue 2
		done

		case $flag in (-D*)
			CFLAGS="${CFLAGS-} $flag"
			continue
		esac

		"$CC" -xc -Werror "$flag" -o/dev/null - \
		      <<-EOF >/dev/null 2>&1 &
			int main (void) { return 0; }
		EOF
		pids="$pids $!"
		eval "flag_$!"='$flag'

		if [ $(($# % nchildren)) -eq 0 ]
		then
			for pid in $pids
			do
				if wait "$pid"
				then
					eval flag="\"\${flag_$pid-}\""
					unset "flag_$pid"
					CFLAGS="${CFLAGS-} $flag"
					printf ' %s' "$flag"
				fi
			done
			pids=
		fi
	done

	if ! [ "${CFLAGS-}" ]
	then
		printf ' none supported.\a\n'
	else
		echo
	fi

	unset cflags flag given pid
fi


#
# Create M4 command line
#

set --
for var in $makevars
do
	eval "val=\"\${$var-}\""
	[ "$val" ] && set -- "$@" -D"__${var}__=${val# }"
done


#
# Save configuration
#

if [ "$status" ] || ! [ -e config.status ]
then
	swap="$TMPDIR/config.status"

	cat <<-'EOF' >"$swap"
	#!/bin/sh
	# Last configuration detected by ./configure.
	# Run this script to regenerate the files based on that configuration.

	EOF

	vars=
	for var in $makevars
	do
		eval "val=\"\${$var-}\""
		[ "$val" ] || continue
		printf -- '%s="%s"\n' "$var" "${val# }" >>"$swap"
		vars="${vars-} $var"
	done

	cat <<-EOF >>"$swap"

	export ${vars# }
	./configure -Cf $args
	EOF

	chmod +x "$swap"

	mv "$swap" config.status

	warn -q "saved configuration in ${bld-}config.status${rst-}."
fi


#
# Create files
#

filec=0 errc=0 genc=0
for input in *.m4
do
	[ "$input" = "*.m4" ] && break
	name="$(basename "$input")" || 
		err "basename $input: exited with status $?."
	output="${name%.m4}"

	if	[ "$output" = config.status ]	&& 
		[ -e "$output" ]		&&
		! [ "$status" ]
	then
		warn -q "keeping current ${bld-}config.status${rst-}."
		continue
	fi

	filec=$((filec + 1))

	exists=
	# shellcheck disable=2154
	if [ -e "$output" ]
	then
		exists=x
		if ! [ "$force" ]
		then
			warn -y "${bld-}$output${rst_y-} exists;${rst-}" \
			        "give ${bld-}-f${rst-} to overwrite."
			continue
		fi
	fi

	swap="$TMPDIR/$output"
	if m4 -D__args__="$args" "$@" "$input" >"$swap"
	then
		
		mv "$swap" "$output"
		genc=$((genc + 1))
		if [ "$exists" ]
			then warn -qy "replaced ${bld-}$output${rst_y-}."
			else warn -q "generated ${bld-}$output${rst-}."
		fi
	else
		rm -f "$swap" || :
		errc=$((errc + 1))
		warn -r "failed to generate${bld-}$output${rst_r-}."
	fi
	unset swap
done

# shellcheck disable=2154
if ! [ "$quiet" ]
then
	if [ $errc -gt 0 ]
	then
		warn -r "${bld-}$errc${rst_r-} of ${bld-}$filec${rst_r-}" \
		        "file(s) could not be generated."
	elif [ $genc -lt $filec ]
	then
		warn -y "${bld-}$genc${rst_y-} of ${bld-}$filec${rst_y-}" \
		        "file(s) generated."
	else
		warn -g "${bld-}$genc${rst_g-} of ${bld-}$filec${rst_g-}" \
		        "file(s) generated."
	fi
fi

exit $errc
