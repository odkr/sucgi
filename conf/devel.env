# suCGI build configuration for development.
# Use "addflags [COMPILER ...] FLAG [...]" to add compiler flags.

# Use ISO/IEC 9899:1999. Some compilers require this flag.
addflags -std=c99 -pedantic

# Optimise the build. Required for instrumentation.
addflags -O1 -Og

# Enforce __attribute__((nonnull(...))).
addflags -fisolate-erroneous-paths-attribute

# Make sure calculations and conversions don't over- or underflow.
addflags -ftrapv -fstrict-overflow \
         -fp-trap=invalid,overflow,underflow,denormal \
         -fsanitize=integer

# Enable link time optimisation.
# Required for -fsanitize=cfi by clang, but a good idea at any rate.
addflags -flto

# Enable control flow protection.
addflags -fcf-protection=full -fsanitize=cfi

# Enable stack protection.
addflags -fstack-protector -fstack-protector-strong \
         -fsanitize=safe-stack -fstack-security-check

# Protect against stack clashing attacks.
addflags -fstack-clash-protection

# Check for (some) undefined behaviour.
# musl-gcc and musl-clang may have trouble linking UBSan.
case ${CC-} in
(musl-*) : ;;
(*) addflags -fsanitize=undefined -static-libubsan
esac

# Check for (some) addressing bugs.
# musl-gcc and musl-clang may have trouble linking ASan.
case ${CC-} in
(musl-*) : ;;
(*) addflags -fsanitize=address -static-libasan \
             -fsanitize=pointer-compare -fsanitize=pointer-subtract
esac

# Enable gcc's static code analyser.
addflags -fanalyzer

# Turn warnings into errors, but only for compilers that
# support suppressing errors with pragmas.
addflags gcc clang icc -Werror -Werror-all -pedantic-errors

# Enable most warnings for most compilers.
addflags -Wall -Wextra -Wpedantic

# Warn about integer overflow.
addflags -Woverflow

# Prohibit casting away const-qualifiers.
addflags -Wcast-qual -Wwrite-strings

# Make sure switch statements are safe and exhaustive.
addflags -Wimplicit-fallthrough=2 -Wswitch -Wswitch-default

# Accept false positives when catching operations that may overflow a buffer.
addflags -Wstringop-overflow=4

# Be stricter about functions.
addflags -Wunused-function -Wunused-parameter -Wmissing-prototypes

# Be stricter about types.
addflags -Wbad-function-cast -Wcast-align=strict -Wconversion -Wmain

# Be stricter about pointers.
addflags -Wnonnull -Wnull-dereference

# Be stricter about variables.
addflags -Wshadow -Wundef -Wuninitialized

# Be stricter about formats.
addflags -Wformat=2 -Wformat-overflow=2 -Wformat-signedness \
         -Wformat-nonliteral -Wformat-security

# Try to catch logic errors.
addflags -Wparentheses -Wlogical-op

# Enable all warning types for the Intel C compiler (ICC).
addflags icc -w3

# Enable more warnings for ICC.
addflags icc -Wcheck

# Disable uninformative warnings.
addflags -Wno-unknown-warning-option -Wno-unused-command-line-argument \
         -Qunused-arguments

# Disable diagnostics for unknown pragmas for ICC,
# which claims to be compatible with GCC, but isn't.
addflags icc -diag-disable=161,2282

# Disable ICC deprecation warning.
addflags icc -diag-disable=10441

# Needed by icc to compile the test suite given -Werror-all.
addflags icc -no-inline-max-size -no-inline-max-total-size

# Speed up compilation.
addflags -pipe

# Make the global offset table read-only.
addflags -Wl,-z,relro -Wl,-z,now -Wl,-read_only_stubs -Wl,-bind_at_load

# Load local settings.
if [ -e "./conf/local.env" ]
then . "./conf/local.env"
fi

